
CSE331LAB_Project_Final_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004790  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e20  0800489c  0800489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056bc  080056bc  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  080056bc  080056bc  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056bc  080056bc  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056bc  080056bc  000066bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056c0  080056c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080056c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000070  08005734  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08005734  000076c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b756  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d31  00000000  00000000  000127ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00014520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a69  00000000  00000000  00015268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ee5  00000000  00000000  00015cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc78  00000000  00000000  0002dbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac54  00000000  00000000  0003d82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fbc  00000000  00000000  000c84c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000cc484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004884 	.word	0x08004884

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004884 	.word	0x08004884

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	@ 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	@ 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	@ 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <microDelay>:
// Variables to store max and min values
float maxTemp = -100.0, minTemp = 100.0;
float maxHum = 0.0, minHum = 100.0;

void microDelay (uint16_t delay)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <microDelay+0x2c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000f82:	bf00      	nop
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <microDelay+0x2c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3f9      	bcc.n	8000f84 <microDelay+0x14>
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	200000e0 	.word	0x200000e0

08000fa0 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fba:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	482c      	ldr	r0, [pc, #176]	@ (8001080 <DHT11_Start+0xe0>)
 8000fce:	f001 f977 	bl	80022c0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fd8:	4829      	ldr	r0, [pc, #164]	@ (8001080 <DHT11_Start+0xe0>)
 8000fda:	f001 fb0c 	bl	80025f6 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f001 f866 	bl	80020b0 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fea:	4825      	ldr	r0, [pc, #148]	@ (8001080 <DHT11_Start+0xe0>)
 8000fec:	f001 fb03 	bl	80025f6 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000ff0:	201e      	movs	r0, #30
 8000ff2:	f7ff ffbd 	bl	8000f70 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4619      	mov	r1, r3
 8001002:	481f      	ldr	r0, [pc, #124]	@ (8001080 <DHT11_Start+0xe0>)
 8001004:	f001 f95c 	bl	80022c0 <HAL_GPIO_Init>
  microDelay (40);
 8001008:	2028      	movs	r0, #40	@ 0x28
 800100a:	f7ff ffb1 	bl	8000f70 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800100e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001012:	481b      	ldr	r0, [pc, #108]	@ (8001080 <DHT11_Start+0xe0>)
 8001014:	f001 fad8 	bl	80025c8 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10c      	bne.n	8001038 <DHT11_Start+0x98>
  {
    microDelay (80);
 800101e:	2050      	movs	r0, #80	@ 0x50
 8001020:	f7ff ffa6 	bl	8000f70 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001024:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001028:	4815      	ldr	r0, [pc, #84]	@ (8001080 <DHT11_Start+0xe0>)
 800102a:	f001 facd 	bl	80025c8 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <DHT11_Start+0x98>
 8001034:	2301      	movs	r3, #1
 8001036:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001038:	f001 f830 	bl	800209c <HAL_GetTick>
 800103c:	4603      	mov	r3, r0
 800103e:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <DHT11_Start+0xe4>)
 8001040:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001042:	f001 f82b 	bl	800209c <HAL_GetTick>
 8001046:	4603      	mov	r3, r0
 8001048:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <DHT11_Start+0xe8>)
 800104a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800104c:	e004      	b.n	8001058 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 800104e:	f001 f825 	bl	800209c <HAL_GetTick>
 8001052:	4603      	mov	r3, r0
 8001054:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <DHT11_Start+0xe8>)
 8001056:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001058:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800105c:	4808      	ldr	r0, [pc, #32]	@ (8001080 <DHT11_Start+0xe0>)
 800105e:	f001 fab3 	bl	80025c8 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <DHT11_Start+0xd6>
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <DHT11_Start+0xe4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	1c9a      	adds	r2, r3, #2
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <DHT11_Start+0xe8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d8eb      	bhi.n	800104e <DHT11_Start+0xae>
  }
  return Response;
 8001076:	7dfb      	ldrb	r3, [r7, #23]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010c00 	.word	0x40010c00
 8001084:	20000138 	.word	0x20000138
 8001088:	2000013c 	.word	0x2000013c

0800108c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001092:	2300      	movs	r3, #0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	e066      	b.n	8001166 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8001098:	f001 f800 	bl	800209c <HAL_GetTick>
 800109c:	4603      	mov	r3, r0
 800109e:	4a36      	ldr	r2, [pc, #216]	@ (8001178 <DHT11_Read+0xec>)
 80010a0:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80010a2:	f000 fffb 	bl	800209c <HAL_GetTick>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a34      	ldr	r2, [pc, #208]	@ (800117c <DHT11_Read+0xf0>)
 80010aa:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010ac:	e004      	b.n	80010b8 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80010ae:	f000 fff5 	bl	800209c <HAL_GetTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a31      	ldr	r2, [pc, #196]	@ (800117c <DHT11_Read+0xf0>)
 80010b6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010bc:	4830      	ldr	r0, [pc, #192]	@ (8001180 <DHT11_Read+0xf4>)
 80010be:	f001 fa83 	bl	80025c8 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <DHT11_Read+0x4a>
 80010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <DHT11_Read+0xec>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1c9a      	adds	r2, r3, #2
 80010ce:	4b2b      	ldr	r3, [pc, #172]	@ (800117c <DHT11_Read+0xf0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d8eb      	bhi.n	80010ae <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80010d6:	2028      	movs	r0, #40	@ 0x28
 80010d8:	f7ff ff4a 	bl	8000f70 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80010dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e0:	4827      	ldr	r0, [pc, #156]	@ (8001180 <DHT11_Read+0xf4>)
 80010e2:	f001 fa71 	bl	80025c8 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10e      	bne.n	800110a <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2201      	movs	r2, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001102:	4013      	ands	r3, r2
 8001104:	b25b      	sxtb	r3, r3
 8001106:	71bb      	strb	r3, [r7, #6]
 8001108:	e00b      	b.n	8001122 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f1c3 0307 	rsb	r3, r3, #7
 8001110:	2201      	movs	r2, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	b25a      	sxtb	r2, r3
 8001118:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800111c:	4313      	orrs	r3, r2
 800111e:	b25b      	sxtb	r3, r3
 8001120:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001122:	f000 ffbb 	bl	800209c <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a13      	ldr	r2, [pc, #76]	@ (8001178 <DHT11_Read+0xec>)
 800112a:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800112c:	f000 ffb6 	bl	800209c <HAL_GetTick>
 8001130:	4603      	mov	r3, r0
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <DHT11_Read+0xf0>)
 8001134:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001136:	e004      	b.n	8001142 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001138:	f000 ffb0 	bl	800209c <HAL_GetTick>
 800113c:	4603      	mov	r3, r0
 800113e:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <DHT11_Read+0xf0>)
 8001140:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001142:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001146:	480e      	ldr	r0, [pc, #56]	@ (8001180 <DHT11_Read+0xf4>)
 8001148:	f001 fa3e 	bl	80025c8 <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <DHT11_Read+0xd4>
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <DHT11_Read+0xec>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	1c9a      	adds	r2, r3, #2
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <DHT11_Read+0xf0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8eb      	bhi.n	8001138 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3301      	adds	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b07      	cmp	r3, #7
 800116a:	d995      	bls.n	8001098 <DHT11_Read+0xc>
    }
  }
  return b;
 800116c:	79bb      	ldrb	r3, [r7, #6]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000138 	.word	0x20000138
 800117c:	2000013c 	.word	0x2000013c
 8001180:	40010c00 	.word	0x40010c00

08001184 <BuzzerOn>:
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
    HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
}

void BuzzerOn(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2110      	movs	r1, #16
 800118c:	4802      	ldr	r0, [pc, #8]	@ (8001198 <BuzzerOn+0x14>)
 800118e:	f001 fa32 	bl	80025f6 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40010c00 	.word	0x40010c00

0800119c <BuzzerOff>:

void BuzzerOff(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2110      	movs	r1, #16
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <BuzzerOff+0x14>)
 80011a6:	f001 fa26 	bl	80025f6 <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b598      	push	{r3, r4, r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f000 ff18 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 fa20 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f000 fae2 	bl	8001788 <MX_GPIO_Init>
  MX_TIM1_Init();
 80011c4:	f000 fa90 	bl	80016e8 <MX_TIM1_Init>
  MX_I2C2_Init();
 80011c8:	f000 fa60 	bl	800168c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80011cc:	4862      	ldr	r0, [pc, #392]	@ (8001358 <main+0x1a4>)
 80011ce:	f002 fc41 	bl	8003a54 <HAL_TIM_Base_Start>
  SSD1306_Init();
 80011d2:	f000 fb2b 	bl	800182c <SSD1306_Init>

  startMillis = HAL_GetTick(); // Initialize the startMillis
 80011d6:	f000 ff61 	bl	800209c <HAL_GetTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a5f      	ldr	r2, [pc, #380]	@ (800135c <main+0x1a8>)
 80011de:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(DHT11_Start())
 80011e0:	f7ff fede 	bl	8000fa0 <DHT11_Start>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 816e 	beq.w	80014c8 <main+0x314>
	      {
	        RHI = DHT11_Read(); // Relative humidity integral
 80011ec:	f7ff ff4e 	bl	800108c <DHT11_Read>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001360 <main+0x1ac>)
 80011f6:	701a      	strb	r2, [r3, #0]
	        RHD = DHT11_Read(); // Relative humidity decimal
 80011f8:	f7ff ff48 	bl	800108c <DHT11_Read>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b58      	ldr	r3, [pc, #352]	@ (8001364 <main+0x1b0>)
 8001202:	701a      	strb	r2, [r3, #0]
	        TCI = DHT11_Read(); // Celsius integral
 8001204:	f7ff ff42 	bl	800108c <DHT11_Read>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b56      	ldr	r3, [pc, #344]	@ (8001368 <main+0x1b4>)
 800120e:	701a      	strb	r2, [r3, #0]
	        TCD = DHT11_Read(); // Celsius decimal
 8001210:	f7ff ff3c 	bl	800108c <DHT11_Read>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b54      	ldr	r3, [pc, #336]	@ (800136c <main+0x1b8>)
 800121a:	701a      	strb	r2, [r3, #0]
	        SUM = DHT11_Read(); // Check sum
 800121c:	f7ff ff36 	bl	800108c <DHT11_Read>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b52      	ldr	r3, [pc, #328]	@ (8001370 <main+0x1bc>)
 8001226:	701a      	strb	r2, [r3, #0]
	        if (RHI + RHD + TCI + TCD == SUM)
 8001228:	4b4d      	ldr	r3, [pc, #308]	@ (8001360 <main+0x1ac>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b4d      	ldr	r3, [pc, #308]	@ (8001364 <main+0x1b0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a4c      	ldr	r2, [pc, #304]	@ (8001368 <main+0x1b4>)
 8001236:	7812      	ldrb	r2, [r2, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a4c      	ldr	r2, [pc, #304]	@ (800136c <main+0x1b8>)
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a4b      	ldr	r2, [pc, #300]	@ (8001370 <main+0x1bc>)
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	4293      	cmp	r3, r2
 8001246:	f040 813f 	bne.w	80014c8 <main+0x314>
	        {
	          // Can use RHI and TCI for any purposes if whole number only needed
	          tCelsius = (float)TCI + (float)(TCD/10.0);
 800124a:	4b47      	ldr	r3, [pc, #284]	@ (8001368 <main+0x1b4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fc50 	bl	8000af4 <__aeabi_ui2f>
 8001254:	4604      	mov	r4, r0
 8001256:	4b45      	ldr	r3, [pc, #276]	@ (800136c <main+0x1b8>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f8c8 	bl	80003f0 <__aeabi_i2d>
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4b43      	ldr	r3, [pc, #268]	@ (8001374 <main+0x1c0>)
 8001266:	f7ff fa57 	bl	8000718 <__aeabi_ddiv>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fb39 	bl	80008e8 <__aeabi_d2f>
 8001276:	4603      	mov	r3, r0
 8001278:	4619      	mov	r1, r3
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff fb8a 	bl	8000994 <__addsf3>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b3c      	ldr	r3, [pc, #240]	@ (8001378 <main+0x1c4>)
 8001286:	601a      	str	r2, [r3, #0]
	          tFahrenheit = tCelsius * 9/5 + 32;
 8001288:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <main+0x1c4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	493b      	ldr	r1, [pc, #236]	@ (800137c <main+0x1c8>)
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fc88 	bl	8000ba4 <__aeabi_fmul>
 8001294:	4603      	mov	r3, r0
 8001296:	493a      	ldr	r1, [pc, #232]	@ (8001380 <main+0x1cc>)
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fd37 	bl	8000d0c <__aeabi_fdiv>
 800129e:	4603      	mov	r3, r0
 80012a0:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fb75 	bl	8000994 <__addsf3>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b35      	ldr	r3, [pc, #212]	@ (8001384 <main+0x1d0>)
 80012b0:	601a      	str	r2, [r3, #0]
	          RH = (float)RHI + (float)(RHD/10.0);
 80012b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <main+0x1ac>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fc1c 	bl	8000af4 <__aeabi_ui2f>
 80012bc:	4604      	mov	r4, r0
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <main+0x1b0>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f894 	bl	80003f0 <__aeabi_i2d>
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <main+0x1c0>)
 80012ce:	f7ff fa23 	bl	8000718 <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fb05 	bl	80008e8 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	4619      	mov	r1, r3
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff fb56 	bl	8000994 <__addsf3>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <main+0x1d4>)
 80012ee:	601a      	str	r2, [r3, #0]
	          // Can use tCelsius, tFahrenheit and RH for any purposes
	          TFI = tFahrenheit;  // Fahrenheit integral
 80012f0:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <main+0x1d0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe1b 	bl	8000f30 <__aeabi_f2uiz>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <main+0x1d8>)
 8001300:	701a      	strb	r2, [r3, #0]
	          TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8001302:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <main+0x1d0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4922      	ldr	r1, [pc, #136]	@ (8001390 <main+0x1dc>)
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fc4b 	bl	8000ba4 <__aeabi_fmul>
 800130e:	4603      	mov	r3, r0
 8001310:	461c      	mov	r4, r3
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <main+0x1d8>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fbeb 	bl	8000afc <__aeabi_i2f>
 8001326:	4603      	mov	r3, r0
 8001328:	4619      	mov	r1, r3
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff fb30 	bl	8000990 <__aeabi_fsub>
 8001330:	4603      	mov	r3, r0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fdfc 	bl	8000f30 <__aeabi_f2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <main+0x1e0>)
 800133e:	701a      	strb	r2, [r3, #0]

	          if (tCelsius >= 35){
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <main+0x1c4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4914      	ldr	r1, [pc, #80]	@ (8001398 <main+0x1e4>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fdde 	bl	8000f08 <__aeabi_fcmpge>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d024      	beq.n	800139c <main+0x1e8>
	        	  BuzzerOn();
 8001352:	f7ff ff17 	bl	8001184 <BuzzerOn>
 8001356:	e023      	b.n	80013a0 <main+0x1ec>
 8001358:	200000e0 	.word	0x200000e0
 800135c:	20000140 	.word	0x20000140
 8001360:	20000128 	.word	0x20000128
 8001364:	20000129 	.word	0x20000129
 8001368:	2000012e 	.word	0x2000012e
 800136c:	2000012f 	.word	0x2000012f
 8001370:	20000130 	.word	0x20000130
 8001374:	40240000 	.word	0x40240000
 8001378:	20000144 	.word	0x20000144
 800137c:	41100000 	.word	0x41100000
 8001380:	40a00000 	.word	0x40a00000
 8001384:	20000148 	.word	0x20000148
 8001388:	2000014c 	.word	0x2000014c
 800138c:	20000150 	.word	0x20000150
 8001390:	41200000 	.word	0x41200000
 8001394:	20000151 	.word	0x20000151
 8001398:	420c0000 	.word	0x420c0000
	          } else {
	        	  BuzzerOff();
 800139c:	f7ff fefe 	bl	800119c <BuzzerOff>
	          }
	          // Update max and min values
	          if(tCelsius > maxTemp){
 80013a0:	4b79      	ldr	r3, [pc, #484]	@ (8001588 <main+0x3d4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a79      	ldr	r2, [pc, #484]	@ (800158c <main+0x3d8>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fdb6 	bl	8000f1c <__aeabi_fcmpgt>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <main+0x21a>
	        	  maxTemp = tCelsius;
 80013b6:	4b74      	ldr	r3, [pc, #464]	@ (8001588 <main+0x3d4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a74      	ldr	r2, [pc, #464]	@ (800158c <main+0x3d8>)
 80013bc:	6013      	str	r3, [r2, #0]
	        	  maxTCI = TCI;
 80013be:	4b74      	ldr	r3, [pc, #464]	@ (8001590 <main+0x3dc>)
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	4b74      	ldr	r3, [pc, #464]	@ (8001594 <main+0x3e0>)
 80013c4:	701a      	strb	r2, [r3, #0]
				  maxTCD = TCD;
 80013c6:	4b74      	ldr	r3, [pc, #464]	@ (8001598 <main+0x3e4>)
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	4b74      	ldr	r3, [pc, #464]	@ (800159c <main+0x3e8>)
 80013cc:	701a      	strb	r2, [r3, #0]
	          }
	          if(tCelsius < minTemp){
 80013ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001588 <main+0x3d4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a73      	ldr	r2, [pc, #460]	@ (80015a0 <main+0x3ec>)
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fd81 	bl	8000ee0 <__aeabi_fcmplt>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00b      	beq.n	80013fc <main+0x248>
	        	  minTemp = tCelsius;
 80013e4:	4b68      	ldr	r3, [pc, #416]	@ (8001588 <main+0x3d4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a6d      	ldr	r2, [pc, #436]	@ (80015a0 <main+0x3ec>)
 80013ea:	6013      	str	r3, [r2, #0]
	        	  minTCI = TCI;
 80013ec:	4b68      	ldr	r3, [pc, #416]	@ (8001590 <main+0x3dc>)
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	4b6c      	ldr	r3, [pc, #432]	@ (80015a4 <main+0x3f0>)
 80013f2:	701a      	strb	r2, [r3, #0]
	        	  minTCD = TCD;
 80013f4:	4b68      	ldr	r3, [pc, #416]	@ (8001598 <main+0x3e4>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	4b6b      	ldr	r3, [pc, #428]	@ (80015a8 <main+0x3f4>)
 80013fa:	701a      	strb	r2, [r3, #0]
	          }
	          if(RH > maxHum){
 80013fc:	4b6b      	ldr	r3, [pc, #428]	@ (80015ac <main+0x3f8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a6b      	ldr	r2, [pc, #428]	@ (80015b0 <main+0x3fc>)
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fd88 	bl	8000f1c <__aeabi_fcmpgt>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <main+0x276>
	        	  maxHum = RH;
 8001412:	4b66      	ldr	r3, [pc, #408]	@ (80015ac <main+0x3f8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a66      	ldr	r2, [pc, #408]	@ (80015b0 <main+0x3fc>)
 8001418:	6013      	str	r3, [r2, #0]
	        	  maxRHI = RHI;
 800141a:	4b66      	ldr	r3, [pc, #408]	@ (80015b4 <main+0x400>)
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	4b66      	ldr	r3, [pc, #408]	@ (80015b8 <main+0x404>)
 8001420:	701a      	strb	r2, [r3, #0]
	        	  maxRHD = RHD;
 8001422:	4b66      	ldr	r3, [pc, #408]	@ (80015bc <main+0x408>)
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	4b66      	ldr	r3, [pc, #408]	@ (80015c0 <main+0x40c>)
 8001428:	701a      	strb	r2, [r3, #0]
	          }
	          if(RH < minHum){
 800142a:	4b60      	ldr	r3, [pc, #384]	@ (80015ac <main+0x3f8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a65      	ldr	r2, [pc, #404]	@ (80015c4 <main+0x410>)
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd53 	bl	8000ee0 <__aeabi_fcmplt>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00b      	beq.n	8001458 <main+0x2a4>
	        	  minHum = RH;
 8001440:	4b5a      	ldr	r3, [pc, #360]	@ (80015ac <main+0x3f8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a5f      	ldr	r2, [pc, #380]	@ (80015c4 <main+0x410>)
 8001446:	6013      	str	r3, [r2, #0]
	        	  minRHI = RHI;
 8001448:	4b5a      	ldr	r3, [pc, #360]	@ (80015b4 <main+0x400>)
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	4b5e      	ldr	r3, [pc, #376]	@ (80015c8 <main+0x414>)
 800144e:	701a      	strb	r2, [r3, #0]
	        	  minRHD = RHD;
 8001450:	4b5a      	ldr	r3, [pc, #360]	@ (80015bc <main+0x408>)
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <main+0x418>)
 8001456:	701a      	strb	r2, [r3, #0]
	          }

	          sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 8001458:	4b4d      	ldr	r3, [pc, #308]	@ (8001590 <main+0x3dc>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b4e      	ldr	r3, [pc, #312]	@ (8001598 <main+0x3e4>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	495b      	ldr	r1, [pc, #364]	@ (80015d0 <main+0x41c>)
 8001464:	485b      	ldr	r0, [pc, #364]	@ (80015d4 <main+0x420>)
 8001466:	f002 fd5d 	bl	8003f24 <siprintf>
	          SSD1306_GotoXY (0, 0);
 800146a:	2100      	movs	r1, #0
 800146c:	2000      	movs	r0, #0
 800146e:	f000 fb45 	bl	8001afc <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	4958      	ldr	r1, [pc, #352]	@ (80015d8 <main+0x424>)
 8001476:	4857      	ldr	r0, [pc, #348]	@ (80015d4 <main+0x420>)
 8001478:	f000 fbd4 	bl	8001c24 <SSD1306_Puts>
	          sprintf(strCopy,"%d.%d F   ", TFI, TFD);
 800147c:	4b57      	ldr	r3, [pc, #348]	@ (80015dc <main+0x428>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b57      	ldr	r3, [pc, #348]	@ (80015e0 <main+0x42c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4957      	ldr	r1, [pc, #348]	@ (80015e4 <main+0x430>)
 8001488:	4852      	ldr	r0, [pc, #328]	@ (80015d4 <main+0x420>)
 800148a:	f002 fd4b 	bl	8003f24 <siprintf>
	          SSD1306_GotoXY (0, 20);
 800148e:	2114      	movs	r1, #20
 8001490:	2000      	movs	r0, #0
 8001492:	f000 fb33 	bl	8001afc <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001496:	2201      	movs	r2, #1
 8001498:	494f      	ldr	r1, [pc, #316]	@ (80015d8 <main+0x424>)
 800149a:	484e      	ldr	r0, [pc, #312]	@ (80015d4 <main+0x420>)
 800149c:	f000 fbc2 	bl	8001c24 <SSD1306_Puts>
	          sprintf(strCopy,"%d.%d %%  ", RHI, RHD);
 80014a0:	4b44      	ldr	r3, [pc, #272]	@ (80015b4 <main+0x400>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b45      	ldr	r3, [pc, #276]	@ (80015bc <main+0x408>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	494f      	ldr	r1, [pc, #316]	@ (80015e8 <main+0x434>)
 80014ac:	4849      	ldr	r0, [pc, #292]	@ (80015d4 <main+0x420>)
 80014ae:	f002 fd39 	bl	8003f24 <siprintf>
	          SSD1306_GotoXY (0, 40);
 80014b2:	2128      	movs	r1, #40	@ 0x28
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 fb21 	bl	8001afc <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	4946      	ldr	r1, [pc, #280]	@ (80015d8 <main+0x424>)
 80014be:	4845      	ldr	r0, [pc, #276]	@ (80015d4 <main+0x420>)
 80014c0:	f000 fbb0 	bl	8001c24 <SSD1306_Puts>
	          SSD1306_UpdateScreen();
 80014c4:	f000 fa76 	bl	80019b4 <SSD1306_UpdateScreen>
	        }
	      }

	      // Check if 5 seconds have passed
	      if (HAL_GetTick() - startMillis >= 5000)
 80014c8:	f000 fde8 	bl	800209c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <main+0x438>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80014d8:	4293      	cmp	r3, r2
 80014da:	d950      	bls.n	800157e <main+0x3ca>
	      {
	    	  // Display max and min values
	    	  SSD1306_Clear();
 80014dc:	f000 fbc7 	bl	8001c6e <SSD1306_Clear>
	          sprintf(strCopy,"Max: %d.%d C", maxTCI, maxTCD);
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <main+0x3e0>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <main+0x3e8>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4941      	ldr	r1, [pc, #260]	@ (80015f0 <main+0x43c>)
 80014ec:	4839      	ldr	r0, [pc, #228]	@ (80015d4 <main+0x420>)
 80014ee:	f002 fd19 	bl	8003f24 <siprintf>
	          SSD1306_GotoXY (0, 0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 fb01 	bl	8001afc <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	4936      	ldr	r1, [pc, #216]	@ (80015d8 <main+0x424>)
 80014fe:	4835      	ldr	r0, [pc, #212]	@ (80015d4 <main+0x420>)
 8001500:	f000 fb90 	bl	8001c24 <SSD1306_Puts>
	          sprintf(strCopy,"Min: %d.%d C", minTCI, minTCD);
 8001504:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <main+0x3f0>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <main+0x3f4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4939      	ldr	r1, [pc, #228]	@ (80015f4 <main+0x440>)
 8001510:	4830      	ldr	r0, [pc, #192]	@ (80015d4 <main+0x420>)
 8001512:	f002 fd07 	bl	8003f24 <siprintf>
	          SSD1306_GotoXY (0, 20);
 8001516:	2114      	movs	r1, #20
 8001518:	2000      	movs	r0, #0
 800151a:	f000 faef 	bl	8001afc <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 800151e:	2201      	movs	r2, #1
 8001520:	492d      	ldr	r1, [pc, #180]	@ (80015d8 <main+0x424>)
 8001522:	482c      	ldr	r0, [pc, #176]	@ (80015d4 <main+0x420>)
 8001524:	f000 fb7e 	bl	8001c24 <SSD1306_Puts>
	          sprintf(strCopy,"Max: %d.%d %%", maxRHI, maxRHD);
 8001528:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <main+0x404>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <main+0x40c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4931      	ldr	r1, [pc, #196]	@ (80015f8 <main+0x444>)
 8001534:	4827      	ldr	r0, [pc, #156]	@ (80015d4 <main+0x420>)
 8001536:	f002 fcf5 	bl	8003f24 <siprintf>
	          SSD1306_GotoXY (0, 40);
 800153a:	2128      	movs	r1, #40	@ 0x28
 800153c:	2000      	movs	r0, #0
 800153e:	f000 fadd 	bl	8001afc <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	4924      	ldr	r1, [pc, #144]	@ (80015d8 <main+0x424>)
 8001546:	4823      	ldr	r0, [pc, #140]	@ (80015d4 <main+0x420>)
 8001548:	f000 fb6c 	bl	8001c24 <SSD1306_Puts>
	          sprintf(strCopy,"Min: %d.%d %%", minRHI, minRHD);
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <main+0x414>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <main+0x418>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4929      	ldr	r1, [pc, #164]	@ (80015fc <main+0x448>)
 8001558:	481e      	ldr	r0, [pc, #120]	@ (80015d4 <main+0x420>)
 800155a:	f002 fce3 	bl	8003f24 <siprintf>
	          SSD1306_GotoXY (0, 60);
 800155e:	213c      	movs	r1, #60	@ 0x3c
 8001560:	2000      	movs	r0, #0
 8001562:	f000 facb 	bl	8001afc <SSD1306_GotoXY>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	491b      	ldr	r1, [pc, #108]	@ (80015d8 <main+0x424>)
 800156a:	481a      	ldr	r0, [pc, #104]	@ (80015d4 <main+0x420>)
 800156c:	f000 fb5a 	bl	8001c24 <SSD1306_Puts>
	          SSD1306_UpdateScreen();
 8001570:	f000 fa20 	bl	80019b4 <SSD1306_UpdateScreen>

	          // Reset the timer
	          startMillis = HAL_GetTick();
 8001574:	f000 fd92 	bl	800209c <HAL_GetTick>
 8001578:	4603      	mov	r3, r0
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <main+0x438>)
 800157c:	6013      	str	r3, [r2, #0]
	      }

	      HAL_Delay(2000);
 800157e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001582:	f000 fd95 	bl	80020b0 <HAL_Delay>
	  if(DHT11_Start())
 8001586:	e62b      	b.n	80011e0 <main+0x2c>
 8001588:	20000144 	.word	0x20000144
 800158c:	20000008 	.word	0x20000008
 8001590:	2000012e 	.word	0x2000012e
 8001594:	20000131 	.word	0x20000131
 8001598:	2000012f 	.word	0x2000012f
 800159c:	20000132 	.word	0x20000132
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	20000133 	.word	0x20000133
 80015a8:	20000134 	.word	0x20000134
 80015ac:	2000014c 	.word	0x2000014c
 80015b0:	20000164 	.word	0x20000164
 80015b4:	20000128 	.word	0x20000128
 80015b8:	2000012a 	.word	0x2000012a
 80015bc:	20000129 	.word	0x20000129
 80015c0:	2000012b 	.word	0x2000012b
 80015c4:	20000010 	.word	0x20000010
 80015c8:	2000012c 	.word	0x2000012c
 80015cc:	2000012d 	.word	0x2000012d
 80015d0:	0800489c 	.word	0x0800489c
 80015d4:	20000154 	.word	0x20000154
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000150 	.word	0x20000150
 80015e0:	20000151 	.word	0x20000151
 80015e4:	080048a8 	.word	0x080048a8
 80015e8:	080048b4 	.word	0x080048b4
 80015ec:	20000140 	.word	0x20000140
 80015f0:	080048c0 	.word	0x080048c0
 80015f4:	080048d0 	.word	0x080048d0
 80015f8:	080048e0 	.word	0x080048e0
 80015fc:	080048f0 	.word	0x080048f0

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b090      	sub	sp, #64	@ 0x40
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	2228      	movs	r2, #40	@ 0x28
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f002 fca8 	bl	8003f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001626:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001634:	2302      	movs	r3, #2
 8001636:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800163c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800163e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fdb7 	bl	80031bc <HAL_RCC_OscConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001654:	f000 f8e4 	bl	8001820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001658:	230f      	movs	r3, #15
 800165a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165c:	2302      	movs	r3, #2
 800165e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001664:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2102      	movs	r1, #2
 8001672:	4618      	mov	r0, r3
 8001674:	f002 f824 	bl	80036c0 <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800167e:	f000 f8cf 	bl	8001820 <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3740      	adds	r7, #64	@ 0x40
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <MX_I2C2_Init+0x50>)
 8001692:	4a13      	ldr	r2, [pc, #76]	@ (80016e0 <MX_I2C2_Init+0x54>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_I2C2_Init+0x50>)
 8001698:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <MX_I2C2_Init+0x58>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_I2C2_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_I2C2_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_I2C2_Init+0x50>)
 80016aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <MX_I2C2_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_I2C2_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <MX_I2C2_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_I2C2_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	@ (80016dc <MX_I2C2_Init+0x50>)
 80016ca:	f000 ffad 	bl	8002628 <HAL_I2C_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016d4:	f000 f8a4 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000008c 	.word	0x2000008c
 80016e0:	40005800 	.word	0x40005800
 80016e4:	00061a80 	.word	0x00061a80

080016e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <MX_TIM1_Init+0x98>)
 8001706:	4a1f      	ldr	r2, [pc, #124]	@ (8001784 <MX_TIM1_Init+0x9c>)
 8001708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800170a:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <MX_TIM1_Init+0x98>)
 800170c:	2247      	movs	r2, #71	@ 0x47
 800170e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <MX_TIM1_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001716:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <MX_TIM1_Init+0x98>)
 8001718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800171c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <MX_TIM1_Init+0x98>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <MX_TIM1_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <MX_TIM1_Init+0x98>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001730:	4813      	ldr	r0, [pc, #76]	@ (8001780 <MX_TIM1_Init+0x98>)
 8001732:	f002 f93f 	bl	80039b4 <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800173c:	f000 f870 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4619      	mov	r1, r3
 800174c:	480c      	ldr	r0, [pc, #48]	@ (8001780 <MX_TIM1_Init+0x98>)
 800174e:	f002 f9cb 	bl	8003ae8 <HAL_TIM_ConfigClockSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001758:	f000 f862 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	@ (8001780 <MX_TIM1_Init+0x98>)
 800176a:	f002 fb7d 	bl	8003e68 <HAL_TIMEx_MasterConfigSynchronization>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001774:	f000 f854 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200000e0 	.word	0x200000e0
 8001784:	40012c00 	.word	0x40012c00

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179c:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <MX_GPIO_Init+0x90>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <MX_GPIO_Init+0x90>)
 80017a2:	f043 0320 	orr.w	r3, r3, #32
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <MX_GPIO_Init+0x90>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <MX_GPIO_Init+0x90>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <MX_GPIO_Init+0x90>)
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <MX_GPIO_Init+0x90>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <MX_GPIO_Init+0x90>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a11      	ldr	r2, [pc, #68]	@ (8001818 <MX_GPIO_Init+0x90>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <MX_GPIO_Init+0x90>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80017ea:	480c      	ldr	r0, [pc, #48]	@ (800181c <MX_GPIO_Init+0x94>)
 80017ec:	f000 ff03 	bl	80025f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 80017f0:	f44f 7304 	mov.w	r3, #528	@ 0x210
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2302      	movs	r3, #2
 8001800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	4619      	mov	r1, r3
 8001808:	4804      	ldr	r0, [pc, #16]	@ (800181c <MX_GPIO_Init+0x94>)
 800180a:	f000 fd59 	bl	80022c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800180e:	bf00      	nop
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	40010c00 	.word	0x40010c00

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <Error_Handler+0x8>

0800182c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001832:	f000 fa25 	bl	8001c80 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001836:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800183a:	2201      	movs	r2, #1
 800183c:	2178      	movs	r1, #120	@ 0x78
 800183e:	485b      	ldr	r0, [pc, #364]	@ (80019ac <SSD1306_Init+0x180>)
 8001840:	f001 f934 	bl	8002aac <HAL_I2C_IsDeviceReady>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800184a:	2300      	movs	r3, #0
 800184c:	e0a9      	b.n	80019a2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800184e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001852:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001854:	e002      	b.n	800185c <SSD1306_Init+0x30>
		p--;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3b01      	subs	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f9      	bne.n	8001856 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001862:	22ae      	movs	r2, #174	@ 0xae
 8001864:	2100      	movs	r1, #0
 8001866:	2078      	movs	r0, #120	@ 0x78
 8001868:	f000 fa84 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800186c:	2220      	movs	r2, #32
 800186e:	2100      	movs	r1, #0
 8001870:	2078      	movs	r0, #120	@ 0x78
 8001872:	f000 fa7f 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001876:	2210      	movs	r2, #16
 8001878:	2100      	movs	r1, #0
 800187a:	2078      	movs	r0, #120	@ 0x78
 800187c:	f000 fa7a 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001880:	22b0      	movs	r2, #176	@ 0xb0
 8001882:	2100      	movs	r1, #0
 8001884:	2078      	movs	r0, #120	@ 0x78
 8001886:	f000 fa75 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800188a:	22c8      	movs	r2, #200	@ 0xc8
 800188c:	2100      	movs	r1, #0
 800188e:	2078      	movs	r0, #120	@ 0x78
 8001890:	f000 fa70 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2078      	movs	r0, #120	@ 0x78
 800189a:	f000 fa6b 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800189e:	2210      	movs	r2, #16
 80018a0:	2100      	movs	r1, #0
 80018a2:	2078      	movs	r0, #120	@ 0x78
 80018a4:	f000 fa66 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80018a8:	2240      	movs	r2, #64	@ 0x40
 80018aa:	2100      	movs	r1, #0
 80018ac:	2078      	movs	r0, #120	@ 0x78
 80018ae:	f000 fa61 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80018b2:	2281      	movs	r2, #129	@ 0x81
 80018b4:	2100      	movs	r1, #0
 80018b6:	2078      	movs	r0, #120	@ 0x78
 80018b8:	f000 fa5c 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80018bc:	22ff      	movs	r2, #255	@ 0xff
 80018be:	2100      	movs	r1, #0
 80018c0:	2078      	movs	r0, #120	@ 0x78
 80018c2:	f000 fa57 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80018c6:	22a1      	movs	r2, #161	@ 0xa1
 80018c8:	2100      	movs	r1, #0
 80018ca:	2078      	movs	r0, #120	@ 0x78
 80018cc:	f000 fa52 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80018d0:	22a6      	movs	r2, #166	@ 0xa6
 80018d2:	2100      	movs	r1, #0
 80018d4:	2078      	movs	r0, #120	@ 0x78
 80018d6:	f000 fa4d 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80018da:	22a8      	movs	r2, #168	@ 0xa8
 80018dc:	2100      	movs	r1, #0
 80018de:	2078      	movs	r0, #120	@ 0x78
 80018e0:	f000 fa48 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80018e4:	223f      	movs	r2, #63	@ 0x3f
 80018e6:	2100      	movs	r1, #0
 80018e8:	2078      	movs	r0, #120	@ 0x78
 80018ea:	f000 fa43 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018ee:	22a4      	movs	r2, #164	@ 0xa4
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	@ 0x78
 80018f4:	f000 fa3e 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80018f8:	22d3      	movs	r2, #211	@ 0xd3
 80018fa:	2100      	movs	r1, #0
 80018fc:	2078      	movs	r0, #120	@ 0x78
 80018fe:	f000 fa39 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2078      	movs	r0, #120	@ 0x78
 8001908:	f000 fa34 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800190c:	22d5      	movs	r2, #213	@ 0xd5
 800190e:	2100      	movs	r1, #0
 8001910:	2078      	movs	r0, #120	@ 0x78
 8001912:	f000 fa2f 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001916:	22f0      	movs	r2, #240	@ 0xf0
 8001918:	2100      	movs	r1, #0
 800191a:	2078      	movs	r0, #120	@ 0x78
 800191c:	f000 fa2a 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001920:	22d9      	movs	r2, #217	@ 0xd9
 8001922:	2100      	movs	r1, #0
 8001924:	2078      	movs	r0, #120	@ 0x78
 8001926:	f000 fa25 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800192a:	2222      	movs	r2, #34	@ 0x22
 800192c:	2100      	movs	r1, #0
 800192e:	2078      	movs	r0, #120	@ 0x78
 8001930:	f000 fa20 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001934:	22da      	movs	r2, #218	@ 0xda
 8001936:	2100      	movs	r1, #0
 8001938:	2078      	movs	r0, #120	@ 0x78
 800193a:	f000 fa1b 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800193e:	2212      	movs	r2, #18
 8001940:	2100      	movs	r1, #0
 8001942:	2078      	movs	r0, #120	@ 0x78
 8001944:	f000 fa16 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001948:	22db      	movs	r2, #219	@ 0xdb
 800194a:	2100      	movs	r1, #0
 800194c:	2078      	movs	r0, #120	@ 0x78
 800194e:	f000 fa11 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001952:	2220      	movs	r2, #32
 8001954:	2100      	movs	r1, #0
 8001956:	2078      	movs	r0, #120	@ 0x78
 8001958:	f000 fa0c 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800195c:	228d      	movs	r2, #141	@ 0x8d
 800195e:	2100      	movs	r1, #0
 8001960:	2078      	movs	r0, #120	@ 0x78
 8001962:	f000 fa07 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001966:	2214      	movs	r2, #20
 8001968:	2100      	movs	r1, #0
 800196a:	2078      	movs	r0, #120	@ 0x78
 800196c:	f000 fa02 	bl	8001d74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001970:	22af      	movs	r2, #175	@ 0xaf
 8001972:	2100      	movs	r1, #0
 8001974:	2078      	movs	r0, #120	@ 0x78
 8001976:	f000 f9fd 	bl	8001d74 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800197a:	222e      	movs	r2, #46	@ 0x2e
 800197c:	2100      	movs	r1, #0
 800197e:	2078      	movs	r0, #120	@ 0x78
 8001980:	f000 f9f8 	bl	8001d74 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001984:	2000      	movs	r0, #0
 8001986:	f000 f843 	bl	8001a10 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800198a:	f000 f813 	bl	80019b4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <SSD1306_Init+0x184>)
 8001990:	2200      	movs	r2, #0
 8001992:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <SSD1306_Init+0x184>)
 8001996:	2200      	movs	r2, #0
 8001998:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <SSD1306_Init+0x184>)
 800199c:	2201      	movs	r2, #1
 800199e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000008c 	.word	0x2000008c
 80019b0:	20000568 	.word	0x20000568

080019b4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	e01d      	b.n	80019fc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	3b50      	subs	r3, #80	@ 0x50
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	2100      	movs	r1, #0
 80019ca:	2078      	movs	r0, #120	@ 0x78
 80019cc:	f000 f9d2 	bl	8001d74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	2078      	movs	r0, #120	@ 0x78
 80019d6:	f000 f9cd 	bl	8001d74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80019da:	2210      	movs	r2, #16
 80019dc:	2100      	movs	r1, #0
 80019de:	2078      	movs	r0, #120	@ 0x78
 80019e0:	f000 f9c8 	bl	8001d74 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	01db      	lsls	r3, r3, #7
 80019e8:	4a08      	ldr	r2, [pc, #32]	@ (8001a0c <SSD1306_UpdateScreen+0x58>)
 80019ea:	441a      	add	r2, r3
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	2140      	movs	r1, #64	@ 0x40
 80019f0:	2078      	movs	r0, #120	@ 0x78
 80019f2:	f000 f959 	bl	8001ca8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	3301      	adds	r3, #1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b07      	cmp	r3, #7
 8001a00:	d9de      	bls.n	80019c0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000168 	.word	0x20000168

08001a10 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <SSD1306_Fill+0x14>
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <SSD1306_Fill+0x16>
 8001a24:	23ff      	movs	r3, #255	@ 0xff
 8001a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <SSD1306_Fill+0x2c>)
 8001a2e:	f002 fa99 	bl	8003f64 <memset>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000168 	.word	0x20000168

08001a40 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	80bb      	strh	r3, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	70fb      	strb	r3, [r7, #3]
	if (
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a56:	d848      	bhi.n	8001aea <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5c:	d845      	bhi.n	8001aea <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a5e:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <SSD1306_DrawPixel+0xb4>)
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d11a      	bne.n	8001ab0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	b298      	uxth	r0, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	4413      	add	r3, r2
 8001a88:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <SSD1306_DrawPixel+0xb8>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	88bb      	ldrh	r3, [r7, #4]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b259      	sxtb	r1, r3
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	01db      	lsls	r3, r3, #7
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2c9      	uxtb	r1, r1
 8001aaa:	4a13      	ldr	r2, [pc, #76]	@ (8001af8 <SSD1306_DrawPixel+0xb8>)
 8001aac:	54d1      	strb	r1, [r2, r3]
 8001aae:	e01d      	b.n	8001aec <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	01db      	lsls	r3, r3, #7
 8001abc:	4413      	add	r3, r2
 8001abe:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <SSD1306_DrawPixel+0xb8>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	b25a      	sxtb	r2, r3
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	b259      	sxtb	r1, r3
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	4603      	mov	r3, r0
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <SSD1306_DrawPixel+0xb8>)
 8001ae6:	54d1      	strb	r1, [r2, r3]
 8001ae8:	e000      	b.n	8001aec <SSD1306_DrawPixel+0xac>
		return;
 8001aea:	bf00      	nop
	}
}
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	20000568 	.word	0x20000568
 8001af8:	20000168 	.word	0x20000168

08001afc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	460a      	mov	r2, r1
 8001b06:	80fb      	strh	r3, [r7, #6]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b0c:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <SSD1306_GotoXY+0x28>)
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b12:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <SSD1306_GotoXY+0x28>)
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	8053      	strh	r3, [r2, #2]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000568 	.word	0x20000568

08001b28 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
 8001b34:	4613      	mov	r3, r2
 8001b36:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b38:	4b39      	ldr	r3, [pc, #228]	@ (8001c20 <SSD1306_Putc+0xf8>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
	if (
 8001b44:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b46:	dc07      	bgt.n	8001b58 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b48:	4b35      	ldr	r3, [pc, #212]	@ (8001c20 <SSD1306_Putc+0xf8>)
 8001b4a:	885b      	ldrh	r3, [r3, #2]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b54:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b56:	dd01      	ble.n	8001b5c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e05d      	b.n	8001c18 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e04b      	b.n	8001bfa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	3b20      	subs	r3, #32
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	7849      	ldrb	r1, [r1, #1]
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4619      	mov	r1, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	440b      	add	r3, r1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	e030      	b.n	8001be8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <SSD1306_Putc+0xf8>)
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b298      	uxth	r0, r3
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <SSD1306_Putc+0xf8>)
 8001ba4:	885a      	ldrh	r2, [r3, #2]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	79ba      	ldrb	r2, [r7, #6]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7ff ff45 	bl	8001a40 <SSD1306_DrawPixel>
 8001bb6:	e014      	b.n	8001be2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bb8:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <SSD1306_Putc+0xf8>)
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b298      	uxth	r0, r3
 8001bc4:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <SSD1306_Putc+0xf8>)
 8001bc6:	885a      	ldrh	r2, [r3, #2]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	b299      	uxth	r1, r3
 8001bd0:	79bb      	ldrb	r3, [r7, #6]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f7ff ff2f 	bl	8001a40 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3301      	adds	r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d3c8      	bcc.n	8001b86 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d3ad      	bcc.n	8001b62 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <SSD1306_Putc+0xf8>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <SSD1306_Putc+0xf8>)
 8001c14:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000568 	.word	0x20000568

08001c24 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c32:	e012      	b.n	8001c5a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	79fa      	ldrb	r2, [r7, #7]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff73 	bl	8001b28 <SSD1306_Putc>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d002      	beq.n	8001c54 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	e008      	b.n	8001c66 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1e8      	bne.n	8001c34 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	781b      	ldrb	r3, [r3, #0]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fecc 	bl	8001a10 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001c78:	f7ff fe9c 	bl	80019b4 <SSD1306_UpdateScreen>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <ssd1306_I2C_Init+0x24>)
 8001c88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c8a:	e002      	b.n	8001c92 <ssd1306_I2C_Init+0x12>
		p--;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f9      	bne.n	8001c8c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	0003d090 	.word	0x0003d090

08001ca8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b0c7      	sub	sp, #284	@ 0x11c
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	4604      	mov	r4, r0
 8001cb0:	4608      	mov	r0, r1
 8001cb2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001cb6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001cba:	600a      	str	r2, [r1, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cc2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cce:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cde:	460a      	mov	r2, r1
 8001ce0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001ce2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001cee:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001cfc:	e015      	b.n	8001d2a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001cfe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d02:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d06:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	441a      	add	r2, r3
 8001d0e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d12:	3301      	adds	r3, #1
 8001d14:	7811      	ldrb	r1, [r2, #0]
 8001d16:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d1a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001d1e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d20:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d24:	3301      	adds	r3, #1
 8001d26:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001d2a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001d34:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001d38:	8812      	ldrh	r2, [r2, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d8df      	bhi.n	8001cfe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001d3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d42:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b299      	uxth	r1, r3
 8001d4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f107 020c 	add.w	r2, r7, #12
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	9000      	str	r0, [sp, #0]
 8001d60:	4803      	ldr	r0, [pc, #12]	@ (8001d70 <ssd1306_I2C_WriteMulti+0xc8>)
 8001d62:	f000 fda5 	bl	80028b0 <HAL_I2C_Master_Transmit>
}
 8001d66:	bf00      	nop
 8001d68:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd90      	pop	{r4, r7, pc}
 8001d70:	2000008c 	.word	0x2000008c

08001d74 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	71bb      	strb	r3, [r7, #6]
 8001d82:	4613      	mov	r3, r2
 8001d84:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d8a:	797b      	ldrb	r3, [r7, #5]
 8001d8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	b299      	uxth	r1, r3
 8001d92:	f107 020c 	add.w	r2, r7, #12
 8001d96:	230a      	movs	r3, #10
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	4803      	ldr	r0, [pc, #12]	@ (8001dac <ssd1306_I2C_Write+0x38>)
 8001d9e:	f000 fd87 	bl	80028b0 <HAL_I2C_Master_Transmit>
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000008c 	.word	0x2000008c

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_MspInit+0x5c>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	4a14      	ldr	r2, [pc, #80]	@ (8001e0c <HAL_MspInit+0x5c>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6193      	str	r3, [r2, #24]
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_MspInit+0x5c>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_MspInit+0x5c>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e0c <HAL_MspInit+0x5c>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <HAL_MspInit+0x5c>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_MspInit+0x60>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_MspInit+0x60>)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010000 	.word	0x40010000

08001e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a16      	ldr	r2, [pc, #88]	@ (8001e88 <HAL_I2C_MspInit+0x74>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d124      	bne.n	8001e7e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e4c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e52:	2312      	movs	r3, #18
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480b      	ldr	r0, [pc, #44]	@ (8001e90 <HAL_I2C_MspInit+0x7c>)
 8001e62:	f000 fa2d 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a08      	ldr	r2, [pc, #32]	@ (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3720      	adds	r7, #32
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40005800 	.word	0x40005800
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010c00 	.word	0x40010c00

08001e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a09      	ldr	r2, [pc, #36]	@ (8001ec8 <HAL_TIM_Base_MspInit+0x34>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d10b      	bne.n	8001ebe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_TIM_Base_MspInit+0x38>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a08      	ldr	r2, [pc, #32]	@ (8001ecc <HAL_TIM_Base_MspInit+0x38>)
 8001eac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_TIM_Base_MspInit+0x38>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <BusFault_Handler+0x4>

08001ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <UsageFault_Handler+0x4>

08001ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f20:	f000 f8aa 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	@ (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f002 f80c 	bl	8003f74 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20005000 	.word	0x20005000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	20000570 	.word	0x20000570
 8001f90:	200006c0 	.word	0x200006c0

08001f94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa0:	f7ff fff8 	bl	8001f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa4:	480b      	ldr	r0, [pc, #44]	@ (8001fd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fa6:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a09      	ldr	r2, [pc, #36]	@ (8001fe0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fbc:	4c09      	ldr	r4, [pc, #36]	@ (8001fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fca:	f001 ffd9 	bl	8003f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fce:	f7ff f8f1 	bl	80011b4 <main>
  bx lr
 8001fd2:	4770      	bx	lr
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001fdc:	080056c4 	.word	0x080056c4
  ldr r2, =_sbss
 8001fe0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fe4:	200006c0 	.word	0x200006c0

08001fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC1_2_IRQHandler>
	...

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_Init+0x28>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <HAL_Init+0x28>)
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 f92b 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002002:	200f      	movs	r0, #15
 8002004:	f000 f808 	bl	8002018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7ff fed2 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40022000 	.word	0x40022000

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_InitTick+0x54>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_InitTick+0x58>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f935 	bl	80022a6 <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d80a      	bhi.n	8002062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f000 f90b 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4a06      	ldr	r2, [pc, #24]	@ (8002074 <HAL_InitTick+0x5c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000014 	.word	0x20000014
 8002070:	2000001c 	.word	0x2000001c
 8002074:	20000018 	.word	0x20000018

08002078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_IncTick+0x1c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_IncTick+0x20>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a03      	ldr	r2, [pc, #12]	@ (8002098 <HAL_IncTick+0x20>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	2000001c 	.word	0x2000001c
 8002098:	20000574 	.word	0x20000574

0800209c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b02      	ldr	r3, [pc, #8]	@ (80020ac <HAL_GetTick+0x10>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000574 	.word	0x20000574

080020b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff fff0 	bl	800209c <HAL_GetTick>
 80020bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d005      	beq.n	80020d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <HAL_Delay+0x44>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffe0 	bl	800209c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f7      	bhi.n	80020d8 <HAL_Delay+0x28>
  {
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000001c 	.word	0x2000001c

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	@ (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	@ (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	@ (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff90 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff49 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff5e 	bl	8002140 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff90 	bl	80021b0 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5f 	bl	800215c <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffb0 	bl	8002214 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b08b      	sub	sp, #44	@ 0x2c
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	e169      	b.n	80025a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d4:	2201      	movs	r2, #1
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8158 	bne.w	80025a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a9a      	ldr	r2, [pc, #616]	@ (8002560 <HAL_GPIO_Init+0x2a0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d05e      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 80022fc:	4a98      	ldr	r2, [pc, #608]	@ (8002560 <HAL_GPIO_Init+0x2a0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d875      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002302:	4a98      	ldr	r2, [pc, #608]	@ (8002564 <HAL_GPIO_Init+0x2a4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d058      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002308:	4a96      	ldr	r2, [pc, #600]	@ (8002564 <HAL_GPIO_Init+0x2a4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d86f      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800230e:	4a96      	ldr	r2, [pc, #600]	@ (8002568 <HAL_GPIO_Init+0x2a8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d052      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002314:	4a94      	ldr	r2, [pc, #592]	@ (8002568 <HAL_GPIO_Init+0x2a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d869      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800231a:	4a94      	ldr	r2, [pc, #592]	@ (800256c <HAL_GPIO_Init+0x2ac>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04c      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002320:	4a92      	ldr	r2, [pc, #584]	@ (800256c <HAL_GPIO_Init+0x2ac>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d863      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002326:	4a92      	ldr	r2, [pc, #584]	@ (8002570 <HAL_GPIO_Init+0x2b0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d046      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 800232c:	4a90      	ldr	r2, [pc, #576]	@ (8002570 <HAL_GPIO_Init+0x2b0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d85d      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002332:	2b12      	cmp	r3, #18
 8002334:	d82a      	bhi.n	800238c <HAL_GPIO_Init+0xcc>
 8002336:	2b12      	cmp	r3, #18
 8002338:	d859      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800233a:	a201      	add	r2, pc, #4	@ (adr r2, 8002340 <HAL_GPIO_Init+0x80>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	080023bb 	.word	0x080023bb
 8002344:	08002395 	.word	0x08002395
 8002348:	080023a7 	.word	0x080023a7
 800234c:	080023e9 	.word	0x080023e9
 8002350:	080023ef 	.word	0x080023ef
 8002354:	080023ef 	.word	0x080023ef
 8002358:	080023ef 	.word	0x080023ef
 800235c:	080023ef 	.word	0x080023ef
 8002360:	080023ef 	.word	0x080023ef
 8002364:	080023ef 	.word	0x080023ef
 8002368:	080023ef 	.word	0x080023ef
 800236c:	080023ef 	.word	0x080023ef
 8002370:	080023ef 	.word	0x080023ef
 8002374:	080023ef 	.word	0x080023ef
 8002378:	080023ef 	.word	0x080023ef
 800237c:	080023ef 	.word	0x080023ef
 8002380:	080023ef 	.word	0x080023ef
 8002384:	0800239d 	.word	0x0800239d
 8002388:	080023b1 	.word	0x080023b1
 800238c:	4a79      	ldr	r2, [pc, #484]	@ (8002574 <HAL_GPIO_Init+0x2b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002392:	e02c      	b.n	80023ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e029      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	3304      	adds	r3, #4
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e024      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	3308      	adds	r3, #8
 80023ac:	623b      	str	r3, [r7, #32]
          break;
 80023ae:	e01f      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	330c      	adds	r3, #12
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e01a      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c2:	2304      	movs	r3, #4
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e013      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d0:	2308      	movs	r3, #8
 80023d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	611a      	str	r2, [r3, #16]
          break;
 80023da:	e009      	b.n	80023f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023dc:	2308      	movs	r3, #8
 80023de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	615a      	str	r2, [r3, #20]
          break;
 80023e6:	e003      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e000      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          break;
 80023ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2bff      	cmp	r3, #255	@ 0xff
 80023f4:	d801      	bhi.n	80023fa <HAL_GPIO_Init+0x13a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	e001      	b.n	80023fe <HAL_GPIO_Init+0x13e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2bff      	cmp	r3, #255	@ 0xff
 8002404:	d802      	bhi.n	800240c <HAL_GPIO_Init+0x14c>
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x152>
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	3b08      	subs	r3, #8
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	210f      	movs	r1, #15
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	401a      	ands	r2, r3
 8002424:	6a39      	ldr	r1, [r7, #32]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80b1 	beq.w	80025a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002440:	4b4d      	ldr	r3, [pc, #308]	@ (8002578 <HAL_GPIO_Init+0x2b8>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a4c      	ldr	r2, [pc, #304]	@ (8002578 <HAL_GPIO_Init+0x2b8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <HAL_GPIO_Init+0x2b8>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002458:	4a48      	ldr	r2, [pc, #288]	@ (800257c <HAL_GPIO_Init+0x2bc>)
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a40      	ldr	r2, [pc, #256]	@ (8002580 <HAL_GPIO_Init+0x2c0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1ec>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3f      	ldr	r2, [pc, #252]	@ (8002584 <HAL_GPIO_Init+0x2c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1e8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3e      	ldr	r2, [pc, #248]	@ (8002588 <HAL_GPIO_Init+0x2c8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1e4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a3d      	ldr	r2, [pc, #244]	@ (800258c <HAL_GPIO_Init+0x2cc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1e0>
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024ac:	2300      	movs	r3, #0
 80024ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024be:	492f      	ldr	r1, [pc, #188]	@ (800257c <HAL_GPIO_Init+0x2bc>)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	492c      	ldr	r1, [pc, #176]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4928      	ldr	r1, [pc, #160]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002500:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	4922      	ldr	r1, [pc, #136]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	60cb      	str	r3, [r1, #12]
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800250e:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	43db      	mvns	r3, r3
 8002516:	491e      	ldr	r1, [pc, #120]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 8002518:	4013      	ands	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002528:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4918      	ldr	r1, [pc, #96]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002536:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	43db      	mvns	r3, r3
 800253e:	4914      	ldr	r1, [pc, #80]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 8002540:	4013      	ands	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d021      	beq.n	8002594 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002550:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	490e      	ldr	r1, [pc, #56]	@ (8002590 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]
 800255c:	e021      	b.n	80025a2 <HAL_GPIO_Init+0x2e2>
 800255e:	bf00      	nop
 8002560:	10320000 	.word	0x10320000
 8002564:	10310000 	.word	0x10310000
 8002568:	10220000 	.word	0x10220000
 800256c:	10210000 	.word	0x10210000
 8002570:	10120000 	.word	0x10120000
 8002574:	10110000 	.word	0x10110000
 8002578:	40021000 	.word	0x40021000
 800257c:	40010000 	.word	0x40010000
 8002580:	40010800 	.word	0x40010800
 8002584:	40010c00 	.word	0x40010c00
 8002588:	40011000 	.word	0x40011000
 800258c:	40011400 	.word	0x40011400
 8002590:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	43db      	mvns	r3, r3
 800259c:	4909      	ldr	r1, [pc, #36]	@ (80025c4 <HAL_GPIO_Init+0x304>)
 800259e:	4013      	ands	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f47f ae8e 	bne.w	80022d4 <HAL_GPIO_Init+0x14>
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	372c      	adds	r7, #44	@ 0x2c
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]
 8002602:	4613      	mov	r3, r2
 8002604:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002606:	787b      	ldrb	r3, [r7, #1]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002612:	e003      	b.n	800261c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	041a      	lsls	r2, r3, #16
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
	...

08002628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e12b      	b.n	8002892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fbe0 	bl	8001e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2224      	movs	r2, #36	@ 0x24
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800267a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800268a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800268c:	f001 f960 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8002690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4a81      	ldr	r2, [pc, #516]	@ (800289c <HAL_I2C_Init+0x274>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d807      	bhi.n	80026ac <HAL_I2C_Init+0x84>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a80      	ldr	r2, [pc, #512]	@ (80028a0 <HAL_I2C_Init+0x278>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	bf94      	ite	ls
 80026a4:	2301      	movls	r3, #1
 80026a6:	2300      	movhi	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e006      	b.n	80026ba <HAL_I2C_Init+0x92>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a7d      	ldr	r2, [pc, #500]	@ (80028a4 <HAL_I2C_Init+0x27c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	bf94      	ite	ls
 80026b4:	2301      	movls	r3, #1
 80026b6:	2300      	movhi	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0e7      	b.n	8002892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4a78      	ldr	r2, [pc, #480]	@ (80028a8 <HAL_I2C_Init+0x280>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	0c9b      	lsrs	r3, r3, #18
 80026cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a6a      	ldr	r2, [pc, #424]	@ (800289c <HAL_I2C_Init+0x274>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d802      	bhi.n	80026fc <HAL_I2C_Init+0xd4>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3301      	adds	r3, #1
 80026fa:	e009      	b.n	8002710 <HAL_I2C_Init+0xe8>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	4a69      	ldr	r2, [pc, #420]	@ (80028ac <HAL_I2C_Init+0x284>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	099b      	lsrs	r3, r3, #6
 800270e:	3301      	adds	r3, #1
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002722:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	495c      	ldr	r1, [pc, #368]	@ (800289c <HAL_I2C_Init+0x274>)
 800272c:	428b      	cmp	r3, r1
 800272e:	d819      	bhi.n	8002764 <HAL_I2C_Init+0x13c>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e59      	subs	r1, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fbb1 f3f3 	udiv	r3, r1, r3
 800273e:	1c59      	adds	r1, r3, #1
 8002740:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002744:	400b      	ands	r3, r1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_I2C_Init+0x138>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1e59      	subs	r1, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fbb1 f3f3 	udiv	r3, r1, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275e:	e051      	b.n	8002804 <HAL_I2C_Init+0x1dc>
 8002760:	2304      	movs	r3, #4
 8002762:	e04f      	b.n	8002804 <HAL_I2C_Init+0x1dc>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d111      	bne.n	8002790 <HAL_I2C_Init+0x168>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1e58      	subs	r0, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	440b      	add	r3, r1
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e012      	b.n	80027b6 <HAL_I2C_Init+0x18e>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1e58      	subs	r0, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	0099      	lsls	r1, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Init+0x196>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e022      	b.n	8002804 <HAL_I2C_Init+0x1dc>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10e      	bne.n	80027e4 <HAL_I2C_Init+0x1bc>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1e58      	subs	r0, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	440b      	add	r3, r1
 80027d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d8:	3301      	adds	r3, #1
 80027da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027e2:	e00f      	b.n	8002804 <HAL_I2C_Init+0x1dc>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e58      	subs	r0, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	0099      	lsls	r1, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	6809      	ldr	r1, [r1, #0]
 8002808:	4313      	orrs	r3, r2
 800280a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002832:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6911      	ldr	r1, [r2, #16]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68d2      	ldr	r2, [r2, #12]
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	430b      	orrs	r3, r1
 8002846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	000186a0 	.word	0x000186a0
 80028a0:	001e847f 	.word	0x001e847f
 80028a4:	003d08ff 	.word	0x003d08ff
 80028a8:	431bde83 	.word	0x431bde83
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	461a      	mov	r2, r3
 80028bc:	460b      	mov	r3, r1
 80028be:	817b      	strh	r3, [r7, #10]
 80028c0:	4613      	mov	r3, r2
 80028c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff fbea 	bl	800209c <HAL_GetTick>
 80028c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	f040 80e0 	bne.w	8002a98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2319      	movs	r3, #25
 80028de:	2201      	movs	r2, #1
 80028e0:	4970      	ldr	r1, [pc, #448]	@ (8002aa4 <HAL_I2C_Master_Transmit+0x1f4>)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fa92 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
 80028f0:	e0d3      	b.n	8002a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_I2C_Master_Transmit+0x50>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e0cc      	b.n	8002a9a <HAL_I2C_Master_Transmit+0x1ea>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d007      	beq.n	8002926 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002934:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2221      	movs	r2, #33	@ 0x21
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2210      	movs	r2, #16
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	893a      	ldrh	r2, [r7, #8]
 8002956:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a50      	ldr	r2, [pc, #320]	@ (8002aa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002966:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002968:	8979      	ldrh	r1, [r7, #10]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	6a3a      	ldr	r2, [r7, #32]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f9ca 	bl	8002d08 <I2C_MasterRequestWrite>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e08d      	b.n	8002a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002994:	e066      	b.n	8002a64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	6a39      	ldr	r1, [r7, #32]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fb50 	bl	8003040 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d107      	bne.n	80029be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e06b      	b.n	8002a9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	781a      	ldrb	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d11b      	bne.n	8002a38 <HAL_I2C_Master_Transmit+0x188>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d017      	beq.n	8002a38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	6a39      	ldr	r1, [r7, #32]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fb47 	bl	80030d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00d      	beq.n	8002a64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d107      	bne.n	8002a60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e01a      	b.n	8002a9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d194      	bne.n	8002996 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	00100002 	.word	0x00100002
 8002aa8:	ffff0000 	.word	0xffff0000

08002aac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	@ 0x28
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff faee 	bl	800209c <HAL_GetTick>
 8002ac0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	f040 8111 	bne.w	8002cf6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2319      	movs	r3, #25
 8002ada:	2201      	movs	r2, #1
 8002adc:	4988      	ldr	r1, [pc, #544]	@ (8002d00 <HAL_I2C_IsDeviceReady+0x254>)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f994 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
 8002aec:	e104      	b.n	8002cf8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_I2C_IsDeviceReady+0x50>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0fd      	b.n	8002cf8 <HAL_I2C_IsDeviceReady+0x24c>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d007      	beq.n	8002b22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2224      	movs	r2, #36	@ 0x24
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a70      	ldr	r2, [pc, #448]	@ (8002d04 <HAL_I2C_IsDeviceReady+0x258>)
 8002b44:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f952 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00d      	beq.n	8002b8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b7c:	d103      	bne.n	8002b86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b84:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0b6      	b.n	8002cf8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7ff fa7f 	bl	800209c <HAL_GetTick>
 8002b9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bce:	e025      	b.n	8002c1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7ff fa64 	bl	800209c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <HAL_I2C_IsDeviceReady+0x13a>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	22a0      	movs	r2, #160	@ 0xa0
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c26:	d005      	beq.n	8002c34 <HAL_I2C_IsDeviceReady+0x188>
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_I2C_IsDeviceReady+0x188>
 8002c2e:	7dbb      	ldrb	r3, [r7, #22]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0cd      	beq.n	8002bd0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d129      	bne.n	8002c9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2319      	movs	r3, #25
 8002c76:	2201      	movs	r2, #1
 8002c78:	4921      	ldr	r1, [pc, #132]	@ (8002d00 <HAL_I2C_IsDeviceReady+0x254>)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8c6 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e036      	b.n	8002cf8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e02c      	b.n	8002cf8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cb6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2319      	movs	r3, #25
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	490f      	ldr	r1, [pc, #60]	@ (8002d00 <HAL_I2C_IsDeviceReady+0x254>)
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f8a2 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e012      	b.n	8002cf8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f4ff af32 	bcc.w	8002b46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
  }
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	00100002 	.word	0x00100002
 8002d04:	ffff0000 	.word	0xffff0000

08002d08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d006      	beq.n	8002d32 <I2C_MasterRequestWrite+0x2a>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d003      	beq.n	8002d32 <I2C_MasterRequestWrite+0x2a>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d30:	d108      	bne.n	8002d44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e00b      	b.n	8002d5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	2b12      	cmp	r3, #18
 8002d4a:	d107      	bne.n	8002d5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f84f 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00d      	beq.n	8002d90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d82:	d103      	bne.n	8002d8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e035      	b.n	8002dfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d98:	d108      	bne.n	8002dac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002da8:	611a      	str	r2, [r3, #16]
 8002daa:	e01b      	b.n	8002de4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dac:	897b      	ldrh	r3, [r7, #10]
 8002dae:	11db      	asrs	r3, r3, #7
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0306 	and.w	r3, r3, #6
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f063 030f 	orn	r3, r3, #15
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	490e      	ldr	r1, [pc, #56]	@ (8002e04 <I2C_MasterRequestWrite+0xfc>)
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f898 	bl	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e010      	b.n	8002dfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dda:	897b      	ldrh	r3, [r7, #10]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4907      	ldr	r1, [pc, #28]	@ (8002e08 <I2C_MasterRequestWrite+0x100>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f888 	bl	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	00010008 	.word	0x00010008
 8002e08:	00010002 	.word	0x00010002

08002e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e1c:	e048      	b.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d044      	beq.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7ff f939 	bl	800209c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d139      	bne.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d10d      	bne.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	e00c      	b.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d116      	bne.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e023      	b.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10d      	bne.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	e00c      	b.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	43da      	mvns	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d093      	beq.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f0e:	e071      	b.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1e:	d123      	bne.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	f043 0204 	orr.w	r2, r3, #4
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e067      	b.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6e:	d041      	beq.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f70:	f7ff f894 	bl	800209c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d302      	bcc.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d136      	bne.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10c      	bne.n	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	e00b      	b.n	8002fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d016      	beq.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e021      	b.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	0c1b      	lsrs	r3, r3, #16
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10c      	bne.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	43da      	mvns	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4013      	ands	r3, r2
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf14      	ite	ne
 8003010:	2301      	movne	r3, #1
 8003012:	2300      	moveq	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e00b      	b.n	8003030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	f47f af6d 	bne.w	8002f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800304c:	e034      	b.n	80030b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f886 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e034      	b.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d028      	beq.n	80030b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7ff f819 	bl	800209c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11d      	bne.n	80030b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003086:	2b80      	cmp	r3, #128	@ 0x80
 8003088:	d016      	beq.n	80030b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e007      	b.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c2:	2b80      	cmp	r3, #128	@ 0x80
 80030c4:	d1c3      	bne.n	800304e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030dc:	e034      	b.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f83e 	bl	8003160 <I2C_IsAcknowledgeFailed>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e034      	b.n	8003158 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d028      	beq.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7fe ffd1 	bl	800209c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d11d      	bne.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b04      	cmp	r3, #4
 8003118:	d016      	beq.n	8003148 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b04      	cmp	r3, #4
 8003154:	d1c3      	bne.n	80030de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003176:	d11b      	bne.n	80031b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e272      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8087 	beq.w	80032ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031dc:	4b92      	ldr	r3, [pc, #584]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d00c      	beq.n	8003202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d112      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
 80031f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003200:	d10b      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	4b89      	ldr	r3, [pc, #548]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x12c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d168      	bne.n	80032e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e24c      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x76>
 8003224:	4b80      	ldr	r3, [pc, #512]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a7f      	ldr	r2, [pc, #508]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e02e      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b7b      	ldr	r3, [pc, #492]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7a      	ldr	r2, [pc, #488]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b78      	ldr	r3, [pc, #480]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a77      	ldr	r2, [pc, #476]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0xbc>
 800325e:	4b72      	ldr	r3, [pc, #456]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a71      	ldr	r2, [pc, #452]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b6f      	ldr	r3, [pc, #444]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6e      	ldr	r2, [pc, #440]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003278:	4b6b      	ldr	r3, [pc, #428]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6a      	ldr	r2, [pc, #424]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b68      	ldr	r3, [pc, #416]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a67      	ldr	r2, [pc, #412]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800328e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe ff00 	bl	800209c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe fefc 	bl	800209c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e200      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe4>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe feec 	bl	800209c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe fee8 	bl	800209c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1ec      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x10c>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003302:	4b49      	ldr	r3, [pc, #292]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x18c>
 800330e:	4b46      	ldr	r3, [pc, #280]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b43      	ldr	r3, [pc, #268]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x176>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1c0      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4939      	ldr	r1, [pc, #228]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fe fea1 	bl	800209c <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335e:	f7fe fe9d 	bl	800209c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1a1      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b2d      	ldr	r3, [pc, #180]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b2a      	ldr	r3, [pc, #168]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4927      	ldr	r1, [pc, #156]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b26      	ldr	r3, [pc, #152]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fe80 	bl	800209c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fe fe7c 	bl	800209c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e180      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d03a      	beq.n	8003440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d019      	beq.n	8003406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b17      	ldr	r3, [pc, #92]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d8:	f7fe fe60 	bl	800209c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fe fe5c 	bl	800209c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e160      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033fe:	2001      	movs	r0, #1
 8003400:	f000 faba 	bl	8003978 <RCC_Delay>
 8003404:	e01c      	b.n	8003440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003406:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fe fe46 	bl	800209c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003412:	e00f      	b.n	8003434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003414:	f7fe fe42 	bl	800209c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d908      	bls.n	8003434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e146      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	42420000 	.word	0x42420000
 8003430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	4b92      	ldr	r3, [pc, #584]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e9      	bne.n	8003414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a6 	beq.w	800359a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003452:	4b8b      	ldr	r3, [pc, #556]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	4b88      	ldr	r3, [pc, #544]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4a87      	ldr	r2, [pc, #540]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003468:	61d3      	str	r3, [r2, #28]
 800346a:	4b85      	ldr	r3, [pc, #532]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	4b82      	ldr	r3, [pc, #520]	@ (8003684 <HAL_RCC_OscConfig+0x4c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d118      	bne.n	80034b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003486:	4b7f      	ldr	r3, [pc, #508]	@ (8003684 <HAL_RCC_OscConfig+0x4c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7e      	ldr	r2, [pc, #504]	@ (8003684 <HAL_RCC_OscConfig+0x4c8>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003492:	f7fe fe03 	bl	800209c <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349a:	f7fe fdff 	bl	800209c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	@ 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e103      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	4b75      	ldr	r3, [pc, #468]	@ (8003684 <HAL_RCC_OscConfig+0x4c8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x312>
 80034c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	e02d      	b.n	800352a <HAL_RCC_OscConfig+0x36e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x334>
 80034d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4a69      	ldr	r2, [pc, #420]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6213      	str	r3, [r2, #32]
 80034e2:	4b67      	ldr	r3, [pc, #412]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a66      	ldr	r2, [pc, #408]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	6213      	str	r3, [r2, #32]
 80034ee:	e01c      	b.n	800352a <HAL_RCC_OscConfig+0x36e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b05      	cmp	r3, #5
 80034f6:	d10c      	bne.n	8003512 <HAL_RCC_OscConfig+0x356>
 80034f8:	4b61      	ldr	r3, [pc, #388]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4a60      	ldr	r2, [pc, #384]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	6213      	str	r3, [r2, #32]
 8003504:	4b5e      	ldr	r3, [pc, #376]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4a5d      	ldr	r2, [pc, #372]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6213      	str	r3, [r2, #32]
 8003510:	e00b      	b.n	800352a <HAL_RCC_OscConfig+0x36e>
 8003512:	4b5b      	ldr	r3, [pc, #364]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4a5a      	ldr	r2, [pc, #360]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6213      	str	r3, [r2, #32]
 800351e:	4b58      	ldr	r3, [pc, #352]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a57      	ldr	r2, [pc, #348]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d015      	beq.n	800355e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fe fdb3 	bl	800209c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003538:	e00a      	b.n	8003550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fe fdaf 	bl	800209c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0b1      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003550:	4b4b      	ldr	r3, [pc, #300]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0ee      	beq.n	800353a <HAL_RCC_OscConfig+0x37e>
 800355c:	e014      	b.n	8003588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355e:	f7fe fd9d 	bl	800209c <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fe fd99 	bl	800209c <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e09b      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357c:	4b40      	ldr	r3, [pc, #256]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ee      	bne.n	8003566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d105      	bne.n	800359a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4b3c      	ldr	r3, [pc, #240]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	4a3b      	ldr	r2, [pc, #236]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8087 	beq.w	80036b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a4:	4b36      	ldr	r3, [pc, #216]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d061      	beq.n	8003674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d146      	bne.n	8003646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b33      	ldr	r3, [pc, #204]	@ (8003688 <HAL_RCC_OscConfig+0x4cc>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7fe fd6d 	bl	800209c <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fe fd69 	bl	800209c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e06d      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d8:	4b29      	ldr	r3, [pc, #164]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f0      	bne.n	80035c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ec:	d108      	bne.n	8003600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ee:	4b24      	ldr	r3, [pc, #144]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4921      	ldr	r1, [pc, #132]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003600:	4b1f      	ldr	r3, [pc, #124]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a19      	ldr	r1, [r3, #32]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	430b      	orrs	r3, r1
 8003612:	491b      	ldr	r1, [pc, #108]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <HAL_RCC_OscConfig+0x4cc>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7fe fd3d 	bl	800209c <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7fe fd39 	bl	800209c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e03d      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003638:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x46a>
 8003644:	e035      	b.n	80036b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <HAL_RCC_OscConfig+0x4cc>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe fd26 	bl	800209c <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe fd22 	bl	800209c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e026      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003666:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x498>
 8003672:	e01e      	b.n	80036b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e019      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800368c:	4b0b      	ldr	r3, [pc, #44]	@ (80036bc <HAL_RCC_OscConfig+0x500>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	429a      	cmp	r2, r3
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d001      	beq.n	80036b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000

080036c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0d0      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d910      	bls.n	8003704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b67      	ldr	r3, [pc, #412]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 0207 	bic.w	r2, r3, #7
 80036ea:	4965      	ldr	r1, [pc, #404]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b63      	ldr	r3, [pc, #396]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0b8      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800371c:	4b59      	ldr	r3, [pc, #356]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4a58      	ldr	r2, [pc, #352]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003734:	4b53      	ldr	r3, [pc, #332]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a52      	ldr	r2, [pc, #328]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800373e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003740:	4b50      	ldr	r3, [pc, #320]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	494d      	ldr	r1, [pc, #308]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d040      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d115      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e07f      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	4b41      	ldr	r3, [pc, #260]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e073      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378e:	4b3d      	ldr	r3, [pc, #244]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06b      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379e:	4b39      	ldr	r3, [pc, #228]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4936      	ldr	r1, [pc, #216]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b0:	f7fe fc74 	bl	800209c <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fe fc70 	bl	800209c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e053      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 020c 	and.w	r2, r3, #12
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1eb      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e0:	4b27      	ldr	r3, [pc, #156]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d210      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b24      	ldr	r3, [pc, #144]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 0207 	bic.w	r2, r3, #7
 80037f6:	4922      	ldr	r1, [pc, #136]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b20      	ldr	r3, [pc, #128]	@ (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e032      	b.n	8003876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381c:	4b19      	ldr	r3, [pc, #100]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4916      	ldr	r1, [pc, #88]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800383a:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	490e      	ldr	r1, [pc, #56]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800384e:	f000 f821 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003852:	4602      	mov	r2, r0
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	490a      	ldr	r1, [pc, #40]	@ (8003888 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	5ccb      	ldrb	r3, [r1, r3]
 8003862:	fa22 f303 	lsr.w	r3, r2, r3
 8003866:	4a09      	ldr	r2, [pc, #36]	@ (800388c <HAL_RCC_ClockConfig+0x1cc>)
 8003868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800386a:	4b09      	ldr	r3, [pc, #36]	@ (8003890 <HAL_RCC_ClockConfig+0x1d0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fbd2 	bl	8002018 <HAL_InitTick>

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40022000 	.word	0x40022000
 8003884:	40021000 	.word	0x40021000
 8003888:	0800565c 	.word	0x0800565c
 800388c:	20000014 	.word	0x20000014
 8003890:	20000018 	.word	0x20000018

08003894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x94>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x30>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x36>
 80038c2:	e027      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c4:	4b19      	ldr	r3, [pc, #100]	@ (800392c <HAL_RCC_GetSysClockFreq+0x98>)
 80038c6:	613b      	str	r3, [r7, #16]
      break;
 80038c8:	e027      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	4a17      	ldr	r2, [pc, #92]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
 80038d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d010      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038e2:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x94>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	0c5b      	lsrs	r3, r3, #17
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	4a11      	ldr	r2, [pc, #68]	@ (8003934 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a0d      	ldr	r2, [pc, #52]	@ (800392c <HAL_RCC_GetSysClockFreq+0x98>)
 80038f6:	fb03 f202 	mul.w	r2, r3, r2
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e004      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a0c      	ldr	r2, [pc, #48]	@ (8003938 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	613b      	str	r3, [r7, #16]
      break;
 8003912:	e002      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b05      	ldr	r3, [pc, #20]	@ (800392c <HAL_RCC_GetSysClockFreq+0x98>)
 8003916:	613b      	str	r3, [r7, #16]
      break;
 8003918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391a:	693b      	ldr	r3, [r7, #16]
}
 800391c:	4618      	mov	r0, r3
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	007a1200 	.word	0x007a1200
 8003930:	08005674 	.word	0x08005674
 8003934:	08005684 	.word	0x08005684
 8003938:	003d0900 	.word	0x003d0900

0800393c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003940:	4b02      	ldr	r3, [pc, #8]	@ (800394c <HAL_RCC_GetHCLKFreq+0x10>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	20000014 	.word	0x20000014

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003954:	f7ff fff2 	bl	800393c <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4903      	ldr	r1, [pc, #12]	@ (8003974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	0800566c 	.word	0x0800566c

08003978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003980:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <RCC_Delay+0x34>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <RCC_Delay+0x38>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0a5b      	lsrs	r3, r3, #9
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003994:	bf00      	nop
  }
  while (Delay --);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	60fa      	str	r2, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f9      	bne.n	8003994 <RCC_Delay+0x1c>
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	20000014 	.word	0x20000014
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e041      	b.n	8003a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe fa5a 	bl	8001e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f000 f940 	bl	8003c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d001      	beq.n	8003a6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e032      	b.n	8003ad2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <HAL_TIM_Base_Start+0x88>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_TIM_Base_Start+0x48>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a86:	d009      	beq.n	8003a9c <HAL_TIM_Base_Start+0x48>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ae0 <HAL_TIM_Base_Start+0x8c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_TIM_Base_Start+0x48>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a13      	ldr	r2, [pc, #76]	@ (8003ae4 <HAL_TIM_Base_Start+0x90>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d010      	beq.n	8003ad0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	e007      	b.n	8003ad0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800

08003ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIM_ConfigClockSource+0x1c>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0b4      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x186>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3c:	d03e      	beq.n	8003bbc <HAL_TIM_ConfigClockSource+0xd4>
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b42:	f200 8087 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4a:	f000 8086 	beq.w	8003c5a <HAL_TIM_ConfigClockSource+0x172>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b52:	d87f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b54:	2b70      	cmp	r3, #112	@ 0x70
 8003b56:	d01a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0xa6>
 8003b58:	2b70      	cmp	r3, #112	@ 0x70
 8003b5a:	d87b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b5c:	2b60      	cmp	r3, #96	@ 0x60
 8003b5e:	d050      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x11a>
 8003b60:	2b60      	cmp	r3, #96	@ 0x60
 8003b62:	d877      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b64:	2b50      	cmp	r3, #80	@ 0x50
 8003b66:	d03c      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xfa>
 8003b68:	2b50      	cmp	r3, #80	@ 0x50
 8003b6a:	d873      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d058      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x13a>
 8003b70:	2b40      	cmp	r3, #64	@ 0x40
 8003b72:	d86f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	d064      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15a>
 8003b78:	2b30      	cmp	r3, #48	@ 0x30
 8003b7a:	d86b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d060      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15a>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d867      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d05c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15a>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d05a      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	e062      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b9e:	f000 f944 	bl	8003e2a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	609a      	str	r2, [r3, #8]
      break;
 8003bba:	e04f      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bcc:	f000 f92d 	bl	8003e2a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bde:	609a      	str	r2, [r3, #8]
      break;
 8003be0:	e03c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 f8a4 	bl	8003d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2150      	movs	r1, #80	@ 0x50
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f8fb 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003c00:	e02c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f000 f8c2 	bl	8003d98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2160      	movs	r1, #96	@ 0x60
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f8eb 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003c20:	e01c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 f884 	bl	8003d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2140      	movs	r1, #64	@ 0x40
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f8db 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003c40:	e00c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f000 f8d2 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003c52:	e003      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      break;
 8003c58:	e000      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a29      	ldr	r2, [pc, #164]	@ (8003d30 <TIM_Base_SetConfig+0xb8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00b      	beq.n	8003ca8 <TIM_Base_SetConfig+0x30>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c96:	d007      	beq.n	8003ca8 <TIM_Base_SetConfig+0x30>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a26      	ldr	r2, [pc, #152]	@ (8003d34 <TIM_Base_SetConfig+0xbc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_Base_SetConfig+0x30>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a25      	ldr	r2, [pc, #148]	@ (8003d38 <TIM_Base_SetConfig+0xc0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d108      	bne.n	8003cba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d30 <TIM_Base_SetConfig+0xb8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <TIM_Base_SetConfig+0x62>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc8:	d007      	beq.n	8003cda <TIM_Base_SetConfig+0x62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a19      	ldr	r2, [pc, #100]	@ (8003d34 <TIM_Base_SetConfig+0xbc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_Base_SetConfig+0x62>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a18      	ldr	r2, [pc, #96]	@ (8003d38 <TIM_Base_SetConfig+0xc0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a07      	ldr	r2, [pc, #28]	@ (8003d30 <TIM_Base_SetConfig+0xb8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d103      	bne.n	8003d20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	615a      	str	r2, [r3, #20]
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800

08003d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f023 0201 	bic.w	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f023 030a 	bic.w	r3, r3, #10
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0210 	bic.w	r2, r3, #16
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	031b      	lsls	r3, r3, #12
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f043 0307 	orr.w	r3, r3, #7
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	609a      	str	r2, [r3, #8]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	021a      	lsls	r2, r3, #8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	609a      	str	r2, [r3, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e046      	b.n	8003f0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ecc:	d009      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a12      	ldr	r2, [pc, #72]	@ (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a10      	ldr	r2, [pc, #64]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d10c      	bne.n	8003efc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ee8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800

08003f24 <siprintf>:
 8003f24:	b40e      	push	{r1, r2, r3}
 8003f26:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f2a:	b500      	push	{lr}
 8003f2c:	b09c      	sub	sp, #112	@ 0x70
 8003f2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f30:	9002      	str	r0, [sp, #8]
 8003f32:	9006      	str	r0, [sp, #24]
 8003f34:	9107      	str	r1, [sp, #28]
 8003f36:	9104      	str	r1, [sp, #16]
 8003f38:	4808      	ldr	r0, [pc, #32]	@ (8003f5c <siprintf+0x38>)
 8003f3a:	4909      	ldr	r1, [pc, #36]	@ (8003f60 <siprintf+0x3c>)
 8003f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f40:	9105      	str	r1, [sp, #20]
 8003f42:	6800      	ldr	r0, [r0, #0]
 8003f44:	a902      	add	r1, sp, #8
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	f000 f992 	bl	8004270 <_svfiprintf_r>
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	9b02      	ldr	r3, [sp, #8]
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	b01c      	add	sp, #112	@ 0x70
 8003f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f58:	b003      	add	sp, #12
 8003f5a:	4770      	bx	lr
 8003f5c:	20000020 	.word	0x20000020
 8003f60:	ffff0208 	.word	0xffff0208

08003f64 <memset>:
 8003f64:	4603      	mov	r3, r0
 8003f66:	4402      	add	r2, r0
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <memset+0xa>
 8003f6c:	4770      	bx	lr
 8003f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f72:	e7f9      	b.n	8003f68 <memset+0x4>

08003f74 <__errno>:
 8003f74:	4b01      	ldr	r3, [pc, #4]	@ (8003f7c <__errno+0x8>)
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000020 	.word	0x20000020

08003f80 <__libc_init_array>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	2600      	movs	r6, #0
 8003f84:	4d0c      	ldr	r5, [pc, #48]	@ (8003fb8 <__libc_init_array+0x38>)
 8003f86:	4c0d      	ldr	r4, [pc, #52]	@ (8003fbc <__libc_init_array+0x3c>)
 8003f88:	1b64      	subs	r4, r4, r5
 8003f8a:	10a4      	asrs	r4, r4, #2
 8003f8c:	42a6      	cmp	r6, r4
 8003f8e:	d109      	bne.n	8003fa4 <__libc_init_array+0x24>
 8003f90:	f000 fc78 	bl	8004884 <_init>
 8003f94:	2600      	movs	r6, #0
 8003f96:	4d0a      	ldr	r5, [pc, #40]	@ (8003fc0 <__libc_init_array+0x40>)
 8003f98:	4c0a      	ldr	r4, [pc, #40]	@ (8003fc4 <__libc_init_array+0x44>)
 8003f9a:	1b64      	subs	r4, r4, r5
 8003f9c:	10a4      	asrs	r4, r4, #2
 8003f9e:	42a6      	cmp	r6, r4
 8003fa0:	d105      	bne.n	8003fae <__libc_init_array+0x2e>
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa8:	4798      	blx	r3
 8003faa:	3601      	adds	r6, #1
 8003fac:	e7ee      	b.n	8003f8c <__libc_init_array+0xc>
 8003fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb2:	4798      	blx	r3
 8003fb4:	3601      	adds	r6, #1
 8003fb6:	e7f2      	b.n	8003f9e <__libc_init_array+0x1e>
 8003fb8:	080056bc 	.word	0x080056bc
 8003fbc:	080056bc 	.word	0x080056bc
 8003fc0:	080056bc 	.word	0x080056bc
 8003fc4:	080056c0 	.word	0x080056c0

08003fc8 <__retarget_lock_acquire_recursive>:
 8003fc8:	4770      	bx	lr

08003fca <__retarget_lock_release_recursive>:
 8003fca:	4770      	bx	lr

08003fcc <_free_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4605      	mov	r5, r0
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	d040      	beq.n	8004056 <_free_r+0x8a>
 8003fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fd8:	1f0c      	subs	r4, r1, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfb8      	it	lt
 8003fde:	18e4      	addlt	r4, r4, r3
 8003fe0:	f000 f8de 	bl	80041a0 <__malloc_lock>
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8004058 <_free_r+0x8c>)
 8003fe6:	6813      	ldr	r3, [r2, #0]
 8003fe8:	b933      	cbnz	r3, 8003ff8 <_free_r+0x2c>
 8003fea:	6063      	str	r3, [r4, #4]
 8003fec:	6014      	str	r4, [r2, #0]
 8003fee:	4628      	mov	r0, r5
 8003ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ff4:	f000 b8da 	b.w	80041ac <__malloc_unlock>
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	d908      	bls.n	800400e <_free_r+0x42>
 8003ffc:	6820      	ldr	r0, [r4, #0]
 8003ffe:	1821      	adds	r1, r4, r0
 8004000:	428b      	cmp	r3, r1
 8004002:	bf01      	itttt	eq
 8004004:	6819      	ldreq	r1, [r3, #0]
 8004006:	685b      	ldreq	r3, [r3, #4]
 8004008:	1809      	addeq	r1, r1, r0
 800400a:	6021      	streq	r1, [r4, #0]
 800400c:	e7ed      	b.n	8003fea <_free_r+0x1e>
 800400e:	461a      	mov	r2, r3
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	b10b      	cbz	r3, 8004018 <_free_r+0x4c>
 8004014:	42a3      	cmp	r3, r4
 8004016:	d9fa      	bls.n	800400e <_free_r+0x42>
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	1850      	adds	r0, r2, r1
 800401c:	42a0      	cmp	r0, r4
 800401e:	d10b      	bne.n	8004038 <_free_r+0x6c>
 8004020:	6820      	ldr	r0, [r4, #0]
 8004022:	4401      	add	r1, r0
 8004024:	1850      	adds	r0, r2, r1
 8004026:	4283      	cmp	r3, r0
 8004028:	6011      	str	r1, [r2, #0]
 800402a:	d1e0      	bne.n	8003fee <_free_r+0x22>
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4408      	add	r0, r1
 8004032:	6010      	str	r0, [r2, #0]
 8004034:	6053      	str	r3, [r2, #4]
 8004036:	e7da      	b.n	8003fee <_free_r+0x22>
 8004038:	d902      	bls.n	8004040 <_free_r+0x74>
 800403a:	230c      	movs	r3, #12
 800403c:	602b      	str	r3, [r5, #0]
 800403e:	e7d6      	b.n	8003fee <_free_r+0x22>
 8004040:	6820      	ldr	r0, [r4, #0]
 8004042:	1821      	adds	r1, r4, r0
 8004044:	428b      	cmp	r3, r1
 8004046:	bf01      	itttt	eq
 8004048:	6819      	ldreq	r1, [r3, #0]
 800404a:	685b      	ldreq	r3, [r3, #4]
 800404c:	1809      	addeq	r1, r1, r0
 800404e:	6021      	streq	r1, [r4, #0]
 8004050:	6063      	str	r3, [r4, #4]
 8004052:	6054      	str	r4, [r2, #4]
 8004054:	e7cb      	b.n	8003fee <_free_r+0x22>
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	200006bc 	.word	0x200006bc

0800405c <sbrk_aligned>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4e0f      	ldr	r6, [pc, #60]	@ (800409c <sbrk_aligned+0x40>)
 8004060:	460c      	mov	r4, r1
 8004062:	6831      	ldr	r1, [r6, #0]
 8004064:	4605      	mov	r5, r0
 8004066:	b911      	cbnz	r1, 800406e <sbrk_aligned+0x12>
 8004068:	f000 fbaa 	bl	80047c0 <_sbrk_r>
 800406c:	6030      	str	r0, [r6, #0]
 800406e:	4621      	mov	r1, r4
 8004070:	4628      	mov	r0, r5
 8004072:	f000 fba5 	bl	80047c0 <_sbrk_r>
 8004076:	1c43      	adds	r3, r0, #1
 8004078:	d103      	bne.n	8004082 <sbrk_aligned+0x26>
 800407a:	f04f 34ff 	mov.w	r4, #4294967295
 800407e:	4620      	mov	r0, r4
 8004080:	bd70      	pop	{r4, r5, r6, pc}
 8004082:	1cc4      	adds	r4, r0, #3
 8004084:	f024 0403 	bic.w	r4, r4, #3
 8004088:	42a0      	cmp	r0, r4
 800408a:	d0f8      	beq.n	800407e <sbrk_aligned+0x22>
 800408c:	1a21      	subs	r1, r4, r0
 800408e:	4628      	mov	r0, r5
 8004090:	f000 fb96 	bl	80047c0 <_sbrk_r>
 8004094:	3001      	adds	r0, #1
 8004096:	d1f2      	bne.n	800407e <sbrk_aligned+0x22>
 8004098:	e7ef      	b.n	800407a <sbrk_aligned+0x1e>
 800409a:	bf00      	nop
 800409c:	200006b8 	.word	0x200006b8

080040a0 <_malloc_r>:
 80040a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a4:	1ccd      	adds	r5, r1, #3
 80040a6:	f025 0503 	bic.w	r5, r5, #3
 80040aa:	3508      	adds	r5, #8
 80040ac:	2d0c      	cmp	r5, #12
 80040ae:	bf38      	it	cc
 80040b0:	250c      	movcc	r5, #12
 80040b2:	2d00      	cmp	r5, #0
 80040b4:	4606      	mov	r6, r0
 80040b6:	db01      	blt.n	80040bc <_malloc_r+0x1c>
 80040b8:	42a9      	cmp	r1, r5
 80040ba:	d904      	bls.n	80040c6 <_malloc_r+0x26>
 80040bc:	230c      	movs	r3, #12
 80040be:	6033      	str	r3, [r6, #0]
 80040c0:	2000      	movs	r0, #0
 80040c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800419c <_malloc_r+0xfc>
 80040ca:	f000 f869 	bl	80041a0 <__malloc_lock>
 80040ce:	f8d8 3000 	ldr.w	r3, [r8]
 80040d2:	461c      	mov	r4, r3
 80040d4:	bb44      	cbnz	r4, 8004128 <_malloc_r+0x88>
 80040d6:	4629      	mov	r1, r5
 80040d8:	4630      	mov	r0, r6
 80040da:	f7ff ffbf 	bl	800405c <sbrk_aligned>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	4604      	mov	r4, r0
 80040e2:	d158      	bne.n	8004196 <_malloc_r+0xf6>
 80040e4:	f8d8 4000 	ldr.w	r4, [r8]
 80040e8:	4627      	mov	r7, r4
 80040ea:	2f00      	cmp	r7, #0
 80040ec:	d143      	bne.n	8004176 <_malloc_r+0xd6>
 80040ee:	2c00      	cmp	r4, #0
 80040f0:	d04b      	beq.n	800418a <_malloc_r+0xea>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	4639      	mov	r1, r7
 80040f6:	4630      	mov	r0, r6
 80040f8:	eb04 0903 	add.w	r9, r4, r3
 80040fc:	f000 fb60 	bl	80047c0 <_sbrk_r>
 8004100:	4581      	cmp	r9, r0
 8004102:	d142      	bne.n	800418a <_malloc_r+0xea>
 8004104:	6821      	ldr	r1, [r4, #0]
 8004106:	4630      	mov	r0, r6
 8004108:	1a6d      	subs	r5, r5, r1
 800410a:	4629      	mov	r1, r5
 800410c:	f7ff ffa6 	bl	800405c <sbrk_aligned>
 8004110:	3001      	adds	r0, #1
 8004112:	d03a      	beq.n	800418a <_malloc_r+0xea>
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	442b      	add	r3, r5
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	f8d8 3000 	ldr.w	r3, [r8]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	bb62      	cbnz	r2, 800417c <_malloc_r+0xdc>
 8004122:	f8c8 7000 	str.w	r7, [r8]
 8004126:	e00f      	b.n	8004148 <_malloc_r+0xa8>
 8004128:	6822      	ldr	r2, [r4, #0]
 800412a:	1b52      	subs	r2, r2, r5
 800412c:	d420      	bmi.n	8004170 <_malloc_r+0xd0>
 800412e:	2a0b      	cmp	r2, #11
 8004130:	d917      	bls.n	8004162 <_malloc_r+0xc2>
 8004132:	1961      	adds	r1, r4, r5
 8004134:	42a3      	cmp	r3, r4
 8004136:	6025      	str	r5, [r4, #0]
 8004138:	bf18      	it	ne
 800413a:	6059      	strne	r1, [r3, #4]
 800413c:	6863      	ldr	r3, [r4, #4]
 800413e:	bf08      	it	eq
 8004140:	f8c8 1000 	streq.w	r1, [r8]
 8004144:	5162      	str	r2, [r4, r5]
 8004146:	604b      	str	r3, [r1, #4]
 8004148:	4630      	mov	r0, r6
 800414a:	f000 f82f 	bl	80041ac <__malloc_unlock>
 800414e:	f104 000b 	add.w	r0, r4, #11
 8004152:	1d23      	adds	r3, r4, #4
 8004154:	f020 0007 	bic.w	r0, r0, #7
 8004158:	1ac2      	subs	r2, r0, r3
 800415a:	bf1c      	itt	ne
 800415c:	1a1b      	subne	r3, r3, r0
 800415e:	50a3      	strne	r3, [r4, r2]
 8004160:	e7af      	b.n	80040c2 <_malloc_r+0x22>
 8004162:	6862      	ldr	r2, [r4, #4]
 8004164:	42a3      	cmp	r3, r4
 8004166:	bf0c      	ite	eq
 8004168:	f8c8 2000 	streq.w	r2, [r8]
 800416c:	605a      	strne	r2, [r3, #4]
 800416e:	e7eb      	b.n	8004148 <_malloc_r+0xa8>
 8004170:	4623      	mov	r3, r4
 8004172:	6864      	ldr	r4, [r4, #4]
 8004174:	e7ae      	b.n	80040d4 <_malloc_r+0x34>
 8004176:	463c      	mov	r4, r7
 8004178:	687f      	ldr	r7, [r7, #4]
 800417a:	e7b6      	b.n	80040ea <_malloc_r+0x4a>
 800417c:	461a      	mov	r2, r3
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	42a3      	cmp	r3, r4
 8004182:	d1fb      	bne.n	800417c <_malloc_r+0xdc>
 8004184:	2300      	movs	r3, #0
 8004186:	6053      	str	r3, [r2, #4]
 8004188:	e7de      	b.n	8004148 <_malloc_r+0xa8>
 800418a:	230c      	movs	r3, #12
 800418c:	4630      	mov	r0, r6
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	f000 f80c 	bl	80041ac <__malloc_unlock>
 8004194:	e794      	b.n	80040c0 <_malloc_r+0x20>
 8004196:	6005      	str	r5, [r0, #0]
 8004198:	e7d6      	b.n	8004148 <_malloc_r+0xa8>
 800419a:	bf00      	nop
 800419c:	200006bc 	.word	0x200006bc

080041a0 <__malloc_lock>:
 80041a0:	4801      	ldr	r0, [pc, #4]	@ (80041a8 <__malloc_lock+0x8>)
 80041a2:	f7ff bf11 	b.w	8003fc8 <__retarget_lock_acquire_recursive>
 80041a6:	bf00      	nop
 80041a8:	200006b4 	.word	0x200006b4

080041ac <__malloc_unlock>:
 80041ac:	4801      	ldr	r0, [pc, #4]	@ (80041b4 <__malloc_unlock+0x8>)
 80041ae:	f7ff bf0c 	b.w	8003fca <__retarget_lock_release_recursive>
 80041b2:	bf00      	nop
 80041b4:	200006b4 	.word	0x200006b4

080041b8 <__ssputs_r>:
 80041b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	461f      	mov	r7, r3
 80041be:	688e      	ldr	r6, [r1, #8]
 80041c0:	4682      	mov	sl, r0
 80041c2:	42be      	cmp	r6, r7
 80041c4:	460c      	mov	r4, r1
 80041c6:	4690      	mov	r8, r2
 80041c8:	680b      	ldr	r3, [r1, #0]
 80041ca:	d82d      	bhi.n	8004228 <__ssputs_r+0x70>
 80041cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041d4:	d026      	beq.n	8004224 <__ssputs_r+0x6c>
 80041d6:	6965      	ldr	r5, [r4, #20]
 80041d8:	6909      	ldr	r1, [r1, #16]
 80041da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041de:	eba3 0901 	sub.w	r9, r3, r1
 80041e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041e6:	1c7b      	adds	r3, r7, #1
 80041e8:	444b      	add	r3, r9
 80041ea:	106d      	asrs	r5, r5, #1
 80041ec:	429d      	cmp	r5, r3
 80041ee:	bf38      	it	cc
 80041f0:	461d      	movcc	r5, r3
 80041f2:	0553      	lsls	r3, r2, #21
 80041f4:	d527      	bpl.n	8004246 <__ssputs_r+0x8e>
 80041f6:	4629      	mov	r1, r5
 80041f8:	f7ff ff52 	bl	80040a0 <_malloc_r>
 80041fc:	4606      	mov	r6, r0
 80041fe:	b360      	cbz	r0, 800425a <__ssputs_r+0xa2>
 8004200:	464a      	mov	r2, r9
 8004202:	6921      	ldr	r1, [r4, #16]
 8004204:	f000 fafa 	bl	80047fc <memcpy>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800420e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	6126      	str	r6, [r4, #16]
 8004216:	444e      	add	r6, r9
 8004218:	6026      	str	r6, [r4, #0]
 800421a:	463e      	mov	r6, r7
 800421c:	6165      	str	r5, [r4, #20]
 800421e:	eba5 0509 	sub.w	r5, r5, r9
 8004222:	60a5      	str	r5, [r4, #8]
 8004224:	42be      	cmp	r6, r7
 8004226:	d900      	bls.n	800422a <__ssputs_r+0x72>
 8004228:	463e      	mov	r6, r7
 800422a:	4632      	mov	r2, r6
 800422c:	4641      	mov	r1, r8
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	f000 faac 	bl	800478c <memmove>
 8004234:	2000      	movs	r0, #0
 8004236:	68a3      	ldr	r3, [r4, #8]
 8004238:	1b9b      	subs	r3, r3, r6
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	4433      	add	r3, r6
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004246:	462a      	mov	r2, r5
 8004248:	f000 fae6 	bl	8004818 <_realloc_r>
 800424c:	4606      	mov	r6, r0
 800424e:	2800      	cmp	r0, #0
 8004250:	d1e0      	bne.n	8004214 <__ssputs_r+0x5c>
 8004252:	4650      	mov	r0, sl
 8004254:	6921      	ldr	r1, [r4, #16]
 8004256:	f7ff feb9 	bl	8003fcc <_free_r>
 800425a:	230c      	movs	r3, #12
 800425c:	f8ca 3000 	str.w	r3, [sl]
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	f04f 30ff 	mov.w	r0, #4294967295
 8004266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800426a:	81a3      	strh	r3, [r4, #12]
 800426c:	e7e9      	b.n	8004242 <__ssputs_r+0x8a>
	...

08004270 <_svfiprintf_r>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	4698      	mov	r8, r3
 8004276:	898b      	ldrh	r3, [r1, #12]
 8004278:	4607      	mov	r7, r0
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	460d      	mov	r5, r1
 800427e:	4614      	mov	r4, r2
 8004280:	b09d      	sub	sp, #116	@ 0x74
 8004282:	d510      	bpl.n	80042a6 <_svfiprintf_r+0x36>
 8004284:	690b      	ldr	r3, [r1, #16]
 8004286:	b973      	cbnz	r3, 80042a6 <_svfiprintf_r+0x36>
 8004288:	2140      	movs	r1, #64	@ 0x40
 800428a:	f7ff ff09 	bl	80040a0 <_malloc_r>
 800428e:	6028      	str	r0, [r5, #0]
 8004290:	6128      	str	r0, [r5, #16]
 8004292:	b930      	cbnz	r0, 80042a2 <_svfiprintf_r+0x32>
 8004294:	230c      	movs	r3, #12
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	b01d      	add	sp, #116	@ 0x74
 800429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a2:	2340      	movs	r3, #64	@ 0x40
 80042a4:	616b      	str	r3, [r5, #20]
 80042a6:	2300      	movs	r3, #0
 80042a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042aa:	2320      	movs	r3, #32
 80042ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042b0:	2330      	movs	r3, #48	@ 0x30
 80042b2:	f04f 0901 	mov.w	r9, #1
 80042b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004454 <_svfiprintf_r+0x1e4>
 80042be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042c2:	4623      	mov	r3, r4
 80042c4:	469a      	mov	sl, r3
 80042c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ca:	b10a      	cbz	r2, 80042d0 <_svfiprintf_r+0x60>
 80042cc:	2a25      	cmp	r2, #37	@ 0x25
 80042ce:	d1f9      	bne.n	80042c4 <_svfiprintf_r+0x54>
 80042d0:	ebba 0b04 	subs.w	fp, sl, r4
 80042d4:	d00b      	beq.n	80042ee <_svfiprintf_r+0x7e>
 80042d6:	465b      	mov	r3, fp
 80042d8:	4622      	mov	r2, r4
 80042da:	4629      	mov	r1, r5
 80042dc:	4638      	mov	r0, r7
 80042de:	f7ff ff6b 	bl	80041b8 <__ssputs_r>
 80042e2:	3001      	adds	r0, #1
 80042e4:	f000 80a7 	beq.w	8004436 <_svfiprintf_r+0x1c6>
 80042e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042ea:	445a      	add	r2, fp
 80042ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80042ee:	f89a 3000 	ldrb.w	r3, [sl]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 809f 	beq.w	8004436 <_svfiprintf_r+0x1c6>
 80042f8:	2300      	movs	r3, #0
 80042fa:	f04f 32ff 	mov.w	r2, #4294967295
 80042fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004302:	f10a 0a01 	add.w	sl, sl, #1
 8004306:	9304      	str	r3, [sp, #16]
 8004308:	9307      	str	r3, [sp, #28]
 800430a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800430e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004310:	4654      	mov	r4, sl
 8004312:	2205      	movs	r2, #5
 8004314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004318:	484e      	ldr	r0, [pc, #312]	@ (8004454 <_svfiprintf_r+0x1e4>)
 800431a:	f000 fa61 	bl	80047e0 <memchr>
 800431e:	9a04      	ldr	r2, [sp, #16]
 8004320:	b9d8      	cbnz	r0, 800435a <_svfiprintf_r+0xea>
 8004322:	06d0      	lsls	r0, r2, #27
 8004324:	bf44      	itt	mi
 8004326:	2320      	movmi	r3, #32
 8004328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800432c:	0711      	lsls	r1, r2, #28
 800432e:	bf44      	itt	mi
 8004330:	232b      	movmi	r3, #43	@ 0x2b
 8004332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004336:	f89a 3000 	ldrb.w	r3, [sl]
 800433a:	2b2a      	cmp	r3, #42	@ 0x2a
 800433c:	d015      	beq.n	800436a <_svfiprintf_r+0xfa>
 800433e:	4654      	mov	r4, sl
 8004340:	2000      	movs	r0, #0
 8004342:	f04f 0c0a 	mov.w	ip, #10
 8004346:	9a07      	ldr	r2, [sp, #28]
 8004348:	4621      	mov	r1, r4
 800434a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800434e:	3b30      	subs	r3, #48	@ 0x30
 8004350:	2b09      	cmp	r3, #9
 8004352:	d94b      	bls.n	80043ec <_svfiprintf_r+0x17c>
 8004354:	b1b0      	cbz	r0, 8004384 <_svfiprintf_r+0x114>
 8004356:	9207      	str	r2, [sp, #28]
 8004358:	e014      	b.n	8004384 <_svfiprintf_r+0x114>
 800435a:	eba0 0308 	sub.w	r3, r0, r8
 800435e:	fa09 f303 	lsl.w	r3, r9, r3
 8004362:	4313      	orrs	r3, r2
 8004364:	46a2      	mov	sl, r4
 8004366:	9304      	str	r3, [sp, #16]
 8004368:	e7d2      	b.n	8004310 <_svfiprintf_r+0xa0>
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	1d19      	adds	r1, r3, #4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	9103      	str	r1, [sp, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	bfbb      	ittet	lt
 8004376:	425b      	neglt	r3, r3
 8004378:	f042 0202 	orrlt.w	r2, r2, #2
 800437c:	9307      	strge	r3, [sp, #28]
 800437e:	9307      	strlt	r3, [sp, #28]
 8004380:	bfb8      	it	lt
 8004382:	9204      	strlt	r2, [sp, #16]
 8004384:	7823      	ldrb	r3, [r4, #0]
 8004386:	2b2e      	cmp	r3, #46	@ 0x2e
 8004388:	d10a      	bne.n	80043a0 <_svfiprintf_r+0x130>
 800438a:	7863      	ldrb	r3, [r4, #1]
 800438c:	2b2a      	cmp	r3, #42	@ 0x2a
 800438e:	d132      	bne.n	80043f6 <_svfiprintf_r+0x186>
 8004390:	9b03      	ldr	r3, [sp, #12]
 8004392:	3402      	adds	r4, #2
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	9203      	str	r2, [sp, #12]
 800439a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800439e:	9305      	str	r3, [sp, #20]
 80043a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004458 <_svfiprintf_r+0x1e8>
 80043a4:	2203      	movs	r2, #3
 80043a6:	4650      	mov	r0, sl
 80043a8:	7821      	ldrb	r1, [r4, #0]
 80043aa:	f000 fa19 	bl	80047e0 <memchr>
 80043ae:	b138      	cbz	r0, 80043c0 <_svfiprintf_r+0x150>
 80043b0:	2240      	movs	r2, #64	@ 0x40
 80043b2:	9b04      	ldr	r3, [sp, #16]
 80043b4:	eba0 000a 	sub.w	r0, r0, sl
 80043b8:	4082      	lsls	r2, r0
 80043ba:	4313      	orrs	r3, r2
 80043bc:	3401      	adds	r4, #1
 80043be:	9304      	str	r3, [sp, #16]
 80043c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c4:	2206      	movs	r2, #6
 80043c6:	4825      	ldr	r0, [pc, #148]	@ (800445c <_svfiprintf_r+0x1ec>)
 80043c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043cc:	f000 fa08 	bl	80047e0 <memchr>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d036      	beq.n	8004442 <_svfiprintf_r+0x1d2>
 80043d4:	4b22      	ldr	r3, [pc, #136]	@ (8004460 <_svfiprintf_r+0x1f0>)
 80043d6:	bb1b      	cbnz	r3, 8004420 <_svfiprintf_r+0x1b0>
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	3307      	adds	r3, #7
 80043dc:	f023 0307 	bic.w	r3, r3, #7
 80043e0:	3308      	adds	r3, #8
 80043e2:	9303      	str	r3, [sp, #12]
 80043e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043e6:	4433      	add	r3, r6
 80043e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ea:	e76a      	b.n	80042c2 <_svfiprintf_r+0x52>
 80043ec:	460c      	mov	r4, r1
 80043ee:	2001      	movs	r0, #1
 80043f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80043f4:	e7a8      	b.n	8004348 <_svfiprintf_r+0xd8>
 80043f6:	2300      	movs	r3, #0
 80043f8:	f04f 0c0a 	mov.w	ip, #10
 80043fc:	4619      	mov	r1, r3
 80043fe:	3401      	adds	r4, #1
 8004400:	9305      	str	r3, [sp, #20]
 8004402:	4620      	mov	r0, r4
 8004404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004408:	3a30      	subs	r2, #48	@ 0x30
 800440a:	2a09      	cmp	r2, #9
 800440c:	d903      	bls.n	8004416 <_svfiprintf_r+0x1a6>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0c6      	beq.n	80043a0 <_svfiprintf_r+0x130>
 8004412:	9105      	str	r1, [sp, #20]
 8004414:	e7c4      	b.n	80043a0 <_svfiprintf_r+0x130>
 8004416:	4604      	mov	r4, r0
 8004418:	2301      	movs	r3, #1
 800441a:	fb0c 2101 	mla	r1, ip, r1, r2
 800441e:	e7f0      	b.n	8004402 <_svfiprintf_r+0x192>
 8004420:	ab03      	add	r3, sp, #12
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	462a      	mov	r2, r5
 8004426:	4638      	mov	r0, r7
 8004428:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <_svfiprintf_r+0x1f4>)
 800442a:	a904      	add	r1, sp, #16
 800442c:	f3af 8000 	nop.w
 8004430:	1c42      	adds	r2, r0, #1
 8004432:	4606      	mov	r6, r0
 8004434:	d1d6      	bne.n	80043e4 <_svfiprintf_r+0x174>
 8004436:	89ab      	ldrh	r3, [r5, #12]
 8004438:	065b      	lsls	r3, r3, #25
 800443a:	f53f af2d 	bmi.w	8004298 <_svfiprintf_r+0x28>
 800443e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004440:	e72c      	b.n	800429c <_svfiprintf_r+0x2c>
 8004442:	ab03      	add	r3, sp, #12
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	462a      	mov	r2, r5
 8004448:	4638      	mov	r0, r7
 800444a:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <_svfiprintf_r+0x1f4>)
 800444c:	a904      	add	r1, sp, #16
 800444e:	f000 f87d 	bl	800454c <_printf_i>
 8004452:	e7ed      	b.n	8004430 <_svfiprintf_r+0x1c0>
 8004454:	08005686 	.word	0x08005686
 8004458:	0800568c 	.word	0x0800568c
 800445c:	08005690 	.word	0x08005690
 8004460:	00000000 	.word	0x00000000
 8004464:	080041b9 	.word	0x080041b9

08004468 <_printf_common>:
 8004468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800446c:	4616      	mov	r6, r2
 800446e:	4698      	mov	r8, r3
 8004470:	688a      	ldr	r2, [r1, #8]
 8004472:	690b      	ldr	r3, [r1, #16]
 8004474:	4607      	mov	r7, r0
 8004476:	4293      	cmp	r3, r2
 8004478:	bfb8      	it	lt
 800447a:	4613      	movlt	r3, r2
 800447c:	6033      	str	r3, [r6, #0]
 800447e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004482:	460c      	mov	r4, r1
 8004484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004488:	b10a      	cbz	r2, 800448e <_printf_common+0x26>
 800448a:	3301      	adds	r3, #1
 800448c:	6033      	str	r3, [r6, #0]
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	0699      	lsls	r1, r3, #26
 8004492:	bf42      	ittt	mi
 8004494:	6833      	ldrmi	r3, [r6, #0]
 8004496:	3302      	addmi	r3, #2
 8004498:	6033      	strmi	r3, [r6, #0]
 800449a:	6825      	ldr	r5, [r4, #0]
 800449c:	f015 0506 	ands.w	r5, r5, #6
 80044a0:	d106      	bne.n	80044b0 <_printf_common+0x48>
 80044a2:	f104 0a19 	add.w	sl, r4, #25
 80044a6:	68e3      	ldr	r3, [r4, #12]
 80044a8:	6832      	ldr	r2, [r6, #0]
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	42ab      	cmp	r3, r5
 80044ae:	dc2b      	bgt.n	8004508 <_printf_common+0xa0>
 80044b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044b4:	6822      	ldr	r2, [r4, #0]
 80044b6:	3b00      	subs	r3, #0
 80044b8:	bf18      	it	ne
 80044ba:	2301      	movne	r3, #1
 80044bc:	0692      	lsls	r2, r2, #26
 80044be:	d430      	bmi.n	8004522 <_printf_common+0xba>
 80044c0:	4641      	mov	r1, r8
 80044c2:	4638      	mov	r0, r7
 80044c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044c8:	47c8      	blx	r9
 80044ca:	3001      	adds	r0, #1
 80044cc:	d023      	beq.n	8004516 <_printf_common+0xae>
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	6922      	ldr	r2, [r4, #16]
 80044d2:	f003 0306 	and.w	r3, r3, #6
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	bf14      	ite	ne
 80044da:	2500      	movne	r5, #0
 80044dc:	6833      	ldreq	r3, [r6, #0]
 80044de:	f04f 0600 	mov.w	r6, #0
 80044e2:	bf08      	it	eq
 80044e4:	68e5      	ldreq	r5, [r4, #12]
 80044e6:	f104 041a 	add.w	r4, r4, #26
 80044ea:	bf08      	it	eq
 80044ec:	1aed      	subeq	r5, r5, r3
 80044ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80044f2:	bf08      	it	eq
 80044f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044f8:	4293      	cmp	r3, r2
 80044fa:	bfc4      	itt	gt
 80044fc:	1a9b      	subgt	r3, r3, r2
 80044fe:	18ed      	addgt	r5, r5, r3
 8004500:	42b5      	cmp	r5, r6
 8004502:	d11a      	bne.n	800453a <_printf_common+0xd2>
 8004504:	2000      	movs	r0, #0
 8004506:	e008      	b.n	800451a <_printf_common+0xb2>
 8004508:	2301      	movs	r3, #1
 800450a:	4652      	mov	r2, sl
 800450c:	4641      	mov	r1, r8
 800450e:	4638      	mov	r0, r7
 8004510:	47c8      	blx	r9
 8004512:	3001      	adds	r0, #1
 8004514:	d103      	bne.n	800451e <_printf_common+0xb6>
 8004516:	f04f 30ff 	mov.w	r0, #4294967295
 800451a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451e:	3501      	adds	r5, #1
 8004520:	e7c1      	b.n	80044a6 <_printf_common+0x3e>
 8004522:	2030      	movs	r0, #48	@ 0x30
 8004524:	18e1      	adds	r1, r4, r3
 8004526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004530:	4422      	add	r2, r4
 8004532:	3302      	adds	r3, #2
 8004534:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004538:	e7c2      	b.n	80044c0 <_printf_common+0x58>
 800453a:	2301      	movs	r3, #1
 800453c:	4622      	mov	r2, r4
 800453e:	4641      	mov	r1, r8
 8004540:	4638      	mov	r0, r7
 8004542:	47c8      	blx	r9
 8004544:	3001      	adds	r0, #1
 8004546:	d0e6      	beq.n	8004516 <_printf_common+0xae>
 8004548:	3601      	adds	r6, #1
 800454a:	e7d9      	b.n	8004500 <_printf_common+0x98>

0800454c <_printf_i>:
 800454c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	7e0f      	ldrb	r7, [r1, #24]
 8004552:	4691      	mov	r9, r2
 8004554:	2f78      	cmp	r7, #120	@ 0x78
 8004556:	4680      	mov	r8, r0
 8004558:	460c      	mov	r4, r1
 800455a:	469a      	mov	sl, r3
 800455c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800455e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004562:	d807      	bhi.n	8004574 <_printf_i+0x28>
 8004564:	2f62      	cmp	r7, #98	@ 0x62
 8004566:	d80a      	bhi.n	800457e <_printf_i+0x32>
 8004568:	2f00      	cmp	r7, #0
 800456a:	f000 80d3 	beq.w	8004714 <_printf_i+0x1c8>
 800456e:	2f58      	cmp	r7, #88	@ 0x58
 8004570:	f000 80ba 	beq.w	80046e8 <_printf_i+0x19c>
 8004574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800457c:	e03a      	b.n	80045f4 <_printf_i+0xa8>
 800457e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004582:	2b15      	cmp	r3, #21
 8004584:	d8f6      	bhi.n	8004574 <_printf_i+0x28>
 8004586:	a101      	add	r1, pc, #4	@ (adr r1, 800458c <_printf_i+0x40>)
 8004588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800458c:	080045e5 	.word	0x080045e5
 8004590:	080045f9 	.word	0x080045f9
 8004594:	08004575 	.word	0x08004575
 8004598:	08004575 	.word	0x08004575
 800459c:	08004575 	.word	0x08004575
 80045a0:	08004575 	.word	0x08004575
 80045a4:	080045f9 	.word	0x080045f9
 80045a8:	08004575 	.word	0x08004575
 80045ac:	08004575 	.word	0x08004575
 80045b0:	08004575 	.word	0x08004575
 80045b4:	08004575 	.word	0x08004575
 80045b8:	080046fb 	.word	0x080046fb
 80045bc:	08004623 	.word	0x08004623
 80045c0:	080046b5 	.word	0x080046b5
 80045c4:	08004575 	.word	0x08004575
 80045c8:	08004575 	.word	0x08004575
 80045cc:	0800471d 	.word	0x0800471d
 80045d0:	08004575 	.word	0x08004575
 80045d4:	08004623 	.word	0x08004623
 80045d8:	08004575 	.word	0x08004575
 80045dc:	08004575 	.word	0x08004575
 80045e0:	080046bd 	.word	0x080046bd
 80045e4:	6833      	ldr	r3, [r6, #0]
 80045e6:	1d1a      	adds	r2, r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6032      	str	r2, [r6, #0]
 80045ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045f4:	2301      	movs	r3, #1
 80045f6:	e09e      	b.n	8004736 <_printf_i+0x1ea>
 80045f8:	6833      	ldr	r3, [r6, #0]
 80045fa:	6820      	ldr	r0, [r4, #0]
 80045fc:	1d19      	adds	r1, r3, #4
 80045fe:	6031      	str	r1, [r6, #0]
 8004600:	0606      	lsls	r6, r0, #24
 8004602:	d501      	bpl.n	8004608 <_printf_i+0xbc>
 8004604:	681d      	ldr	r5, [r3, #0]
 8004606:	e003      	b.n	8004610 <_printf_i+0xc4>
 8004608:	0645      	lsls	r5, r0, #25
 800460a:	d5fb      	bpl.n	8004604 <_printf_i+0xb8>
 800460c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004610:	2d00      	cmp	r5, #0
 8004612:	da03      	bge.n	800461c <_printf_i+0xd0>
 8004614:	232d      	movs	r3, #45	@ 0x2d
 8004616:	426d      	negs	r5, r5
 8004618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800461c:	230a      	movs	r3, #10
 800461e:	4859      	ldr	r0, [pc, #356]	@ (8004784 <_printf_i+0x238>)
 8004620:	e011      	b.n	8004646 <_printf_i+0xfa>
 8004622:	6821      	ldr	r1, [r4, #0]
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	0608      	lsls	r0, r1, #24
 8004628:	f853 5b04 	ldr.w	r5, [r3], #4
 800462c:	d402      	bmi.n	8004634 <_printf_i+0xe8>
 800462e:	0649      	lsls	r1, r1, #25
 8004630:	bf48      	it	mi
 8004632:	b2ad      	uxthmi	r5, r5
 8004634:	2f6f      	cmp	r7, #111	@ 0x6f
 8004636:	6033      	str	r3, [r6, #0]
 8004638:	bf14      	ite	ne
 800463a:	230a      	movne	r3, #10
 800463c:	2308      	moveq	r3, #8
 800463e:	4851      	ldr	r0, [pc, #324]	@ (8004784 <_printf_i+0x238>)
 8004640:	2100      	movs	r1, #0
 8004642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004646:	6866      	ldr	r6, [r4, #4]
 8004648:	2e00      	cmp	r6, #0
 800464a:	bfa8      	it	ge
 800464c:	6821      	ldrge	r1, [r4, #0]
 800464e:	60a6      	str	r6, [r4, #8]
 8004650:	bfa4      	itt	ge
 8004652:	f021 0104 	bicge.w	r1, r1, #4
 8004656:	6021      	strge	r1, [r4, #0]
 8004658:	b90d      	cbnz	r5, 800465e <_printf_i+0x112>
 800465a:	2e00      	cmp	r6, #0
 800465c:	d04b      	beq.n	80046f6 <_printf_i+0x1aa>
 800465e:	4616      	mov	r6, r2
 8004660:	fbb5 f1f3 	udiv	r1, r5, r3
 8004664:	fb03 5711 	mls	r7, r3, r1, r5
 8004668:	5dc7      	ldrb	r7, [r0, r7]
 800466a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800466e:	462f      	mov	r7, r5
 8004670:	42bb      	cmp	r3, r7
 8004672:	460d      	mov	r5, r1
 8004674:	d9f4      	bls.n	8004660 <_printf_i+0x114>
 8004676:	2b08      	cmp	r3, #8
 8004678:	d10b      	bne.n	8004692 <_printf_i+0x146>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	07df      	lsls	r7, r3, #31
 800467e:	d508      	bpl.n	8004692 <_printf_i+0x146>
 8004680:	6923      	ldr	r3, [r4, #16]
 8004682:	6861      	ldr	r1, [r4, #4]
 8004684:	4299      	cmp	r1, r3
 8004686:	bfde      	ittt	le
 8004688:	2330      	movle	r3, #48	@ 0x30
 800468a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800468e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004692:	1b92      	subs	r2, r2, r6
 8004694:	6122      	str	r2, [r4, #16]
 8004696:	464b      	mov	r3, r9
 8004698:	4621      	mov	r1, r4
 800469a:	4640      	mov	r0, r8
 800469c:	f8cd a000 	str.w	sl, [sp]
 80046a0:	aa03      	add	r2, sp, #12
 80046a2:	f7ff fee1 	bl	8004468 <_printf_common>
 80046a6:	3001      	adds	r0, #1
 80046a8:	d14a      	bne.n	8004740 <_printf_i+0x1f4>
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295
 80046ae:	b004      	add	sp, #16
 80046b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	2778      	movs	r7, #120	@ 0x78
 80046be:	4832      	ldr	r0, [pc, #200]	@ (8004788 <_printf_i+0x23c>)
 80046c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	6831      	ldr	r1, [r6, #0]
 80046c8:	061f      	lsls	r7, r3, #24
 80046ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80046ce:	d402      	bmi.n	80046d6 <_printf_i+0x18a>
 80046d0:	065f      	lsls	r7, r3, #25
 80046d2:	bf48      	it	mi
 80046d4:	b2ad      	uxthmi	r5, r5
 80046d6:	6031      	str	r1, [r6, #0]
 80046d8:	07d9      	lsls	r1, r3, #31
 80046da:	bf44      	itt	mi
 80046dc:	f043 0320 	orrmi.w	r3, r3, #32
 80046e0:	6023      	strmi	r3, [r4, #0]
 80046e2:	b11d      	cbz	r5, 80046ec <_printf_i+0x1a0>
 80046e4:	2310      	movs	r3, #16
 80046e6:	e7ab      	b.n	8004640 <_printf_i+0xf4>
 80046e8:	4826      	ldr	r0, [pc, #152]	@ (8004784 <_printf_i+0x238>)
 80046ea:	e7e9      	b.n	80046c0 <_printf_i+0x174>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	f023 0320 	bic.w	r3, r3, #32
 80046f2:	6023      	str	r3, [r4, #0]
 80046f4:	e7f6      	b.n	80046e4 <_printf_i+0x198>
 80046f6:	4616      	mov	r6, r2
 80046f8:	e7bd      	b.n	8004676 <_printf_i+0x12a>
 80046fa:	6833      	ldr	r3, [r6, #0]
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	1d18      	adds	r0, r3, #4
 8004700:	6961      	ldr	r1, [r4, #20]
 8004702:	6030      	str	r0, [r6, #0]
 8004704:	062e      	lsls	r6, r5, #24
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	d501      	bpl.n	800470e <_printf_i+0x1c2>
 800470a:	6019      	str	r1, [r3, #0]
 800470c:	e002      	b.n	8004714 <_printf_i+0x1c8>
 800470e:	0668      	lsls	r0, r5, #25
 8004710:	d5fb      	bpl.n	800470a <_printf_i+0x1be>
 8004712:	8019      	strh	r1, [r3, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	4616      	mov	r6, r2
 8004718:	6123      	str	r3, [r4, #16]
 800471a:	e7bc      	b.n	8004696 <_printf_i+0x14a>
 800471c:	6833      	ldr	r3, [r6, #0]
 800471e:	2100      	movs	r1, #0
 8004720:	1d1a      	adds	r2, r3, #4
 8004722:	6032      	str	r2, [r6, #0]
 8004724:	681e      	ldr	r6, [r3, #0]
 8004726:	6862      	ldr	r2, [r4, #4]
 8004728:	4630      	mov	r0, r6
 800472a:	f000 f859 	bl	80047e0 <memchr>
 800472e:	b108      	cbz	r0, 8004734 <_printf_i+0x1e8>
 8004730:	1b80      	subs	r0, r0, r6
 8004732:	6060      	str	r0, [r4, #4]
 8004734:	6863      	ldr	r3, [r4, #4]
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	2300      	movs	r3, #0
 800473a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800473e:	e7aa      	b.n	8004696 <_printf_i+0x14a>
 8004740:	4632      	mov	r2, r6
 8004742:	4649      	mov	r1, r9
 8004744:	4640      	mov	r0, r8
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	47d0      	blx	sl
 800474a:	3001      	adds	r0, #1
 800474c:	d0ad      	beq.n	80046aa <_printf_i+0x15e>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	079b      	lsls	r3, r3, #30
 8004752:	d413      	bmi.n	800477c <_printf_i+0x230>
 8004754:	68e0      	ldr	r0, [r4, #12]
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	4298      	cmp	r0, r3
 800475a:	bfb8      	it	lt
 800475c:	4618      	movlt	r0, r3
 800475e:	e7a6      	b.n	80046ae <_printf_i+0x162>
 8004760:	2301      	movs	r3, #1
 8004762:	4632      	mov	r2, r6
 8004764:	4649      	mov	r1, r9
 8004766:	4640      	mov	r0, r8
 8004768:	47d0      	blx	sl
 800476a:	3001      	adds	r0, #1
 800476c:	d09d      	beq.n	80046aa <_printf_i+0x15e>
 800476e:	3501      	adds	r5, #1
 8004770:	68e3      	ldr	r3, [r4, #12]
 8004772:	9903      	ldr	r1, [sp, #12]
 8004774:	1a5b      	subs	r3, r3, r1
 8004776:	42ab      	cmp	r3, r5
 8004778:	dcf2      	bgt.n	8004760 <_printf_i+0x214>
 800477a:	e7eb      	b.n	8004754 <_printf_i+0x208>
 800477c:	2500      	movs	r5, #0
 800477e:	f104 0619 	add.w	r6, r4, #25
 8004782:	e7f5      	b.n	8004770 <_printf_i+0x224>
 8004784:	08005697 	.word	0x08005697
 8004788:	080056a8 	.word	0x080056a8

0800478c <memmove>:
 800478c:	4288      	cmp	r0, r1
 800478e:	b510      	push	{r4, lr}
 8004790:	eb01 0402 	add.w	r4, r1, r2
 8004794:	d902      	bls.n	800479c <memmove+0x10>
 8004796:	4284      	cmp	r4, r0
 8004798:	4623      	mov	r3, r4
 800479a:	d807      	bhi.n	80047ac <memmove+0x20>
 800479c:	1e43      	subs	r3, r0, #1
 800479e:	42a1      	cmp	r1, r4
 80047a0:	d008      	beq.n	80047b4 <memmove+0x28>
 80047a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047aa:	e7f8      	b.n	800479e <memmove+0x12>
 80047ac:	4601      	mov	r1, r0
 80047ae:	4402      	add	r2, r0
 80047b0:	428a      	cmp	r2, r1
 80047b2:	d100      	bne.n	80047b6 <memmove+0x2a>
 80047b4:	bd10      	pop	{r4, pc}
 80047b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047be:	e7f7      	b.n	80047b0 <memmove+0x24>

080047c0 <_sbrk_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	2300      	movs	r3, #0
 80047c4:	4d05      	ldr	r5, [pc, #20]	@ (80047dc <_sbrk_r+0x1c>)
 80047c6:	4604      	mov	r4, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	f7fd fbac 	bl	8001f28 <_sbrk>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d102      	bne.n	80047da <_sbrk_r+0x1a>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	b103      	cbz	r3, 80047da <_sbrk_r+0x1a>
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	200006b0 	.word	0x200006b0

080047e0 <memchr>:
 80047e0:	4603      	mov	r3, r0
 80047e2:	b510      	push	{r4, lr}
 80047e4:	b2c9      	uxtb	r1, r1
 80047e6:	4402      	add	r2, r0
 80047e8:	4293      	cmp	r3, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	d101      	bne.n	80047f2 <memchr+0x12>
 80047ee:	2000      	movs	r0, #0
 80047f0:	e003      	b.n	80047fa <memchr+0x1a>
 80047f2:	7804      	ldrb	r4, [r0, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	428c      	cmp	r4, r1
 80047f8:	d1f6      	bne.n	80047e8 <memchr+0x8>
 80047fa:	bd10      	pop	{r4, pc}

080047fc <memcpy>:
 80047fc:	440a      	add	r2, r1
 80047fe:	4291      	cmp	r1, r2
 8004800:	f100 33ff 	add.w	r3, r0, #4294967295
 8004804:	d100      	bne.n	8004808 <memcpy+0xc>
 8004806:	4770      	bx	lr
 8004808:	b510      	push	{r4, lr}
 800480a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800480e:	4291      	cmp	r1, r2
 8004810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004814:	d1f9      	bne.n	800480a <memcpy+0xe>
 8004816:	bd10      	pop	{r4, pc}

08004818 <_realloc_r>:
 8004818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481c:	4680      	mov	r8, r0
 800481e:	4615      	mov	r5, r2
 8004820:	460c      	mov	r4, r1
 8004822:	b921      	cbnz	r1, 800482e <_realloc_r+0x16>
 8004824:	4611      	mov	r1, r2
 8004826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800482a:	f7ff bc39 	b.w	80040a0 <_malloc_r>
 800482e:	b92a      	cbnz	r2, 800483c <_realloc_r+0x24>
 8004830:	f7ff fbcc 	bl	8003fcc <_free_r>
 8004834:	2400      	movs	r4, #0
 8004836:	4620      	mov	r0, r4
 8004838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800483c:	f000 f81a 	bl	8004874 <_malloc_usable_size_r>
 8004840:	4285      	cmp	r5, r0
 8004842:	4606      	mov	r6, r0
 8004844:	d802      	bhi.n	800484c <_realloc_r+0x34>
 8004846:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800484a:	d8f4      	bhi.n	8004836 <_realloc_r+0x1e>
 800484c:	4629      	mov	r1, r5
 800484e:	4640      	mov	r0, r8
 8004850:	f7ff fc26 	bl	80040a0 <_malloc_r>
 8004854:	4607      	mov	r7, r0
 8004856:	2800      	cmp	r0, #0
 8004858:	d0ec      	beq.n	8004834 <_realloc_r+0x1c>
 800485a:	42b5      	cmp	r5, r6
 800485c:	462a      	mov	r2, r5
 800485e:	4621      	mov	r1, r4
 8004860:	bf28      	it	cs
 8004862:	4632      	movcs	r2, r6
 8004864:	f7ff ffca 	bl	80047fc <memcpy>
 8004868:	4621      	mov	r1, r4
 800486a:	4640      	mov	r0, r8
 800486c:	f7ff fbae 	bl	8003fcc <_free_r>
 8004870:	463c      	mov	r4, r7
 8004872:	e7e0      	b.n	8004836 <_realloc_r+0x1e>

08004874 <_malloc_usable_size_r>:
 8004874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004878:	1f18      	subs	r0, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	bfbc      	itt	lt
 800487e:	580b      	ldrlt	r3, [r1, r0]
 8004880:	18c0      	addlt	r0, r0, r3
 8004882:	4770      	bx	lr

08004884 <_init>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	bf00      	nop
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr

08004890 <_fini>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr
